// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$icon-bg1-name: 'icon-bg1';
$icon-bg1-x: 0px;
$icon-bg1-y: 0px;
$icon-bg1-offset-x: 0px;
$icon-bg1-offset-y: 0px;
$icon-bg1-width: 40px;
$icon-bg1-height: 30px;
$icon-bg1-total-width: 120px;
$icon-bg1-total-height: 60px;
$icon-bg1-image: '~@images/exclude/sprite.f68d229fbb465db5c9f86d4bdf34d246.png';
$icon-bg1: (0px, 0px, 0px, 0px, 40px, 30px, 120px, 60px, '~@images/exclude/sprite.f68d229fbb465db5c9f86d4bdf34d246.png', 'icon-bg1', );
$icon-bg2-name: 'icon-bg2';
$icon-bg2-x: 40px;
$icon-bg2-y: 0px;
$icon-bg2-offset-x: -40px;
$icon-bg2-offset-y: 0px;
$icon-bg2-width: 40px;
$icon-bg2-height: 30px;
$icon-bg2-total-width: 120px;
$icon-bg2-total-height: 60px;
$icon-bg2-image: '~@images/exclude/sprite.f68d229fbb465db5c9f86d4bdf34d246.png';
$icon-bg2: (40px, 0px, -40px, 0px, 40px, 30px, 120px, 60px, '~@images/exclude/sprite.f68d229fbb465db5c9f86d4bdf34d246.png', 'icon-bg2', );
$icon-bg3-name: 'icon-bg3';
$icon-bg3-x: 0px;
$icon-bg3-y: 30px;
$icon-bg3-offset-x: 0px;
$icon-bg3-offset-y: -30px;
$icon-bg3-width: 40px;
$icon-bg3-height: 30px;
$icon-bg3-total-width: 120px;
$icon-bg3-total-height: 60px;
$icon-bg3-image: '~@images/exclude/sprite.f68d229fbb465db5c9f86d4bdf34d246.png';
$icon-bg3: (0px, 30px, 0px, -30px, 40px, 30px, 120px, 60px, '~@images/exclude/sprite.f68d229fbb465db5c9f86d4bdf34d246.png', 'icon-bg3', );
$icon-bg4-name: 'icon-bg4';
$icon-bg4-x: 40px;
$icon-bg4-y: 30px;
$icon-bg4-offset-x: -40px;
$icon-bg4-offset-y: -30px;
$icon-bg4-width: 40px;
$icon-bg4-height: 30px;
$icon-bg4-total-width: 120px;
$icon-bg4-total-height: 60px;
$icon-bg4-image: '~@images/exclude/sprite.f68d229fbb465db5c9f86d4bdf34d246.png';
$icon-bg4: (40px, 30px, -40px, -30px, 40px, 30px, 120px, 60px, '~@images/exclude/sprite.f68d229fbb465db5c9f86d4bdf34d246.png', 'icon-bg4', );
$icon-bg5-name: 'icon-bg5';
$icon-bg5-x: 80px;
$icon-bg5-y: 0px;
$icon-bg5-offset-x: -80px;
$icon-bg5-offset-y: 0px;
$icon-bg5-width: 40px;
$icon-bg5-height: 30px;
$icon-bg5-total-width: 120px;
$icon-bg5-total-height: 60px;
$icon-bg5-image: '~@images/exclude/sprite.f68d229fbb465db5c9f86d4bdf34d246.png';
$icon-bg5: (80px, 0px, -80px, 0px, 40px, 30px, 120px, 60px, '~@images/exclude/sprite.f68d229fbb465db5c9f86d4bdf34d246.png', 'icon-bg5', );
$spritesheet-width: 120px;
$spritesheet-height: 60px;
$spritesheet-image: '~@images/exclude/sprite.f68d229fbb465db5c9f86d4bdf34d246.png';
$spritesheet-sprites: ($icon-bg1, $icon-bg2, $icon-bg3, $icon-bg4, $icon-bg5, );
$spritesheet: (120px, 60px, '~@images/exclude/sprite.f68d229fbb465db5c9f86d4bdf34d246.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
