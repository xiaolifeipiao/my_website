{"version":3,"file":"ReactSlideToggle.esm.es2015.js","sources":["../src/library/SlideToggle.js"],"sourcesContent":["/*\n  _state_ is internal state for sync and rendering control.\n  setState is async and I need sync control because timing is important\n  and because I need to control what is to be re-rendered.\n*/\n\nimport React from 'react';\n//import PropTypes from 'prop-types';\n\n// Support browser or node env\nconst root = typeof window !== 'undefined' ? window : global;\nconst rAF = root.requestAnimationFrame\n  ? root.requestAnimationFrame.bind(root)\n  : callback => root.setTimeout(callback, 16);\nconst cAF = root.cancelAnimationFrame\n  ? root.cancelAnimationFrame.bind(root)\n  : root.clearInterval.bind(root);\n\nconst TOGGLE = Object.freeze({\n  EXPANDED: 'EXPANDED',\n  COLLAPSED: 'COLLAPSED',\n  EXPANDING: 'EXPANDING',\n  COLLAPSING: 'COLLAPSING',\n});\n\nconst easeInOutCubic = t =>\n  t < 0.5 ? 4 * t * t * t : 0.5 * Math.pow(2 * t - 2, 3) + 1;\n\nconst util = {\n  isMoving: toggleState =>\n    toggleState === TOGGLE.EXPANDING || toggleState === TOGGLE.COLLAPSING,\n  clamp: ({ value, max = 1, min = 0 }) => {\n    if (value > max) return max;\n    if (value < min) return min;\n    return value;\n  },\n  now: () => Date.now(),\n  sanitizeDuration: duration => Math.max(0, parseInt(+duration, 10) || 0),\n  interpolate: ({ next, prev }) => {\n    /*\n      If the diff in the next rAF is big, it can seem jumpy when reversing the toggling\n      This is heuristic approach to minimize the diff value by interpolating.\n    */\n    const diff = Math.abs(next - prev);\n    let interpolated = next;\n    if (diff > 0.15) {\n      /* heuristic value */\n      if (next > prev) interpolated -= diff * 0.75;\n      /* heuristic value */ else\n        interpolated += diff * 0.75; /* heuristic value */\n    }\n    return interpolated;\n  },\n};\n\nexport default class SlideToggle extends React.Component {\n  static defaultProps = {\n    duration: 300,\n    easeCollapse: easeInOutCubic,\n    easeExpand: easeInOutCubic,\n  };\n\n  // Internal state\n  _state_ = {\n    collapsibleElement: null,\n    toggleState: this.props.collapsed ? TOGGLE.COLLAPSED : TOGGLE.EXPANDED,\n  };\n\n  GET_HEIGHT = this.props.offsetHeight ? 'offsetHeight' : 'scrollHeight';\n\n  // React state\n  state = {\n    toggleState: this._state_.toggleState,\n    hasReversed: false,\n    range: this.props.collapsed ? 0 : 1,\n    progress: this.props.collapsed ? 0 : 1,\n  };\n\n  render() {\n    const data = {\n      onToggle: this.toggle, // deprecated\n      toggle: this.toggle,\n      setCollapsibleElement: this.setCollapsibleElement,\n      toggleState: this.state.toggleState,\n      hasReversed: this.state.hasReversed,\n      isMoving: util.isMoving(this.state.toggleState),\n      range: this.state.range,\n      progress: this.state.progress,\n    };\n\n    if (typeof this.props.children === 'function')\n      return this.props.children(data);\n    if (this.props.render) return this.props.render(data);\n\n    return this.props.children;\n  }\n\n  getCollapsible = () => this._state_.collapsibleElement;\n\n  updateCollapsible = (attr, value) => {\n    if (this.getCollapsible()) {\n      this._state_.collapsibleElement.style[attr] = value;\n    }\n  };\n\n  setCollapsibleElement = element => {\n    this._state_.collapsibleElement = element;\n    if (this._state_.collapsibleElement && !this.props.noOverflowHidden) {\n      this._state_.collapsibleElement.style.overflow = 'hidden';\n    }\n    if (this._state_.toggleState === TOGGLE.COLLAPSED) {\n      this.setCollapsedState({ initialState: true });\n    }\n  };\n\n  toggle = () => {\n    if (this.props.irreversible && util.isMoving(this._state_.toggleState)) {\n      return;\n    }\n\n    const invokeCollapsing = () => {\n      this.props.onCollapsing &&\n        this.props.onCollapsing({\n          range: this.state.range,\n          progress: this.state.progress,\n          hasReversed: this.state.hasReversed,\n        });\n\n      this.collapse();\n    };\n    const invokeExpanding = () => {\n      this.props.onExpanding &&\n        this.props.onExpanding({\n          range: this.state.range,\n          progress: this.state.progress,\n          hasReversed: this.state.hasReversed,\n        });\n\n      this.expand();\n    };\n\n    const updateInternalState = ({ toggleState, display, hasReversed }) => {\n      this._state_.toggleState = toggleState;\n      this._state_.hasReversed = !!hasReversed;\n\n      if (display !== undefined && !this.props.noDisplayStyle) {\n        this.updateCollapsible('display', display);\n      }\n\n      const now = util.now();\n\n      if (hasReversed) {\n        const { startTime } = this._state_;\n        const duration = util.sanitizeDuration(this.props.duration);\n        const elapsedTime = Math.min(duration, now - startTime);\n        const subtract = Math.max(0, duration - elapsedTime);\n        this._state_.startTime = now - subtract;\n      } else {\n        const collapsible = this.getCollapsible();\n        if (collapsible && collapsible.style.height) {\n          this.updateCollapsible('height', null);\n        }\n        this._state_.boxHeight = collapsible ? collapsible[this.GET_HEIGHT] : 0;\n        this._state_.startTime = now;\n        this._state_.startDirection = toggleState;\n      }\n\n      this.setState({\n        toggleState: this._state_.toggleState,\n        hasReversed: this._state_.hasReversed,\n      });\n    };\n\n    switch (this._state_.toggleState) {\n      case TOGGLE.EXPANDED:\n        updateInternalState({ toggleState: TOGGLE.COLLAPSING });\n        invokeCollapsing();\n        break;\n      case TOGGLE.COLLAPSED:\n        updateInternalState({\n          toggleState: TOGGLE.EXPANDING,\n          display: '',\n        });\n        invokeExpanding();\n        break;\n      case TOGGLE.EXPANDING:\n        updateInternalState({\n          toggleState: TOGGLE.COLLAPSING,\n          hasReversed: true,\n        });\n        invokeCollapsing();\n        break;\n      case TOGGLE.COLLAPSING:\n        updateInternalState({\n          toggleState: TOGGLE.EXPANDING,\n          display: '',\n          hasReversed: true,\n        });\n        invokeExpanding();\n        break;\n    }\n  };\n\n  setExpandedState = () => {\n    this._state_.progress = 1;\n    this._state_.toggleState = TOGGLE.EXPANDED;\n    this.updateCollapsible('height', null);\n    this.setState({\n      toggleState: TOGGLE.EXPANDED,\n      range: 1,\n      progress: this._state_.progress,\n    });\n    if (this.props.onExpanded) {\n      this.props.onExpanded({\n        hasReversed: this.state.hasReversed,\n      });\n    }\n  };\n\n  expand = () => {\n    if (this._state_.toggleState !== TOGGLE.EXPANDING) {\n      return;\n    }\n\n    const duration = util.sanitizeDuration(this.props.duration);\n    if (duration <= 0) {\n      this.setExpandedState();\n      return;\n    }\n\n    const { startTime } = this._state_;\n    const elapsedTime = Math.min(duration, util.now() - startTime);\n\n    if (elapsedTime >= duration) {\n      this.setExpandedState();\n    } else {\n      const { startDirection, toggleState, boxHeight } = this._state_;\n      const range = util.clamp({ value: elapsedTime / duration });\n\n      let progress;\n      if (\n        this.props.whenReversedUseBackwardEase &&\n        startDirection !== toggleState\n      ) {\n        progress = 1 - this.props.easeCollapse(1 - range);\n      } else {\n        progress = this.props.easeExpand(range);\n      }\n\n      if (!this.props.bestPerformance) {\n        this.setState({\n          range,\n          progress,\n        });\n      }\n\n      if (this.props.interpolateOnReverse && this._state_.hasReversed) {\n        progress = util.interpolate({\n          next: progress,\n          prev: this._state_.progress,\n        });\n      }\n\n      const currentHeightValue = Math.round(boxHeight * progress);\n      this._state_.progress = progress;\n      this.updateCollapsible('height', `${currentHeightValue}px`);\n      this.nextTick(this.expand);\n    }\n  };\n\n  setCollapsedState = ({ initialState } = {}) => {\n    this._state_.progress = 0;\n    this._state_.toggleState = TOGGLE.COLLAPSED;\n\n    if (!this.props.noDisplayStyle) {\n      this.updateCollapsible('display', 'none');\n      this.updateCollapsible('height', null);\n    } else {\n      this.updateCollapsible('height', '0px');\n    }\n\n    this.setState({\n      toggleState: TOGGLE.COLLAPSED,\n      range: 0,\n      progress: this._state_.progress,\n    });\n    if (!initialState && this.props.onCollapsed)\n      this.props.onCollapsed({\n        hasReversed: this.state.hasReversed,\n      });\n  };\n\n  collapse = () => {\n    if (this._state_.toggleState !== TOGGLE.COLLAPSING) {\n      return;\n    }\n    const duration = util.sanitizeDuration(this.props.duration);\n    if (duration <= 0) {\n      this.setCollapsedState();\n      return;\n    }\n\n    const { startTime } = this._state_;\n    const elapsedTime = Math.min(duration, util.now() - startTime);\n\n    if (elapsedTime >= duration) {\n      this.setCollapsedState();\n    } else {\n      const { startDirection, boxHeight, toggleState } = this._state_;\n      const range = 1 - util.clamp({ value: elapsedTime / duration });\n\n      const {\n        whenReversedUseBackwardEase,\n        easeExpand,\n        easeCollapse,\n      } = this.props;\n\n      let progress;\n      if (whenReversedUseBackwardEase && startDirection !== toggleState) {\n        progress = easeExpand(range);\n      } else {\n        progress = 1 - easeCollapse(1 - range);\n      }\n\n      if (!this.props.bestPerformance) {\n        this.setState({\n          range,\n          progress,\n        });\n      }\n\n      if (this.props.interpolateOnReverse && this._state_.hasReversed) {\n        progress = util.interpolate({\n          next: progress,\n          prev: this._state_.progress,\n        });\n      }\n\n      const currentHeightValue = Math.round(boxHeight * progress);\n      this._state_.progress = progress;\n      this._state_.timeout = this.nextTick(this.collapse);\n      this.updateCollapsible('height', `${currentHeightValue}px`);\n    }\n  };\n\n  nextTick = callback => {\n    this._state_.timeout = rAF(callback);\n  };\n\n  componentDidMount() {\n    this.props.onMount &&\n      this.props.onMount({\n        toggleState: this.state.toggleState,\n        toggle: this.toggle,\n      });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      this.props.collapseEvent &&\n      this.props.collapseEvent > prevProps.collapseEvent\n    ) {\n      if (\n        this._state_.toggleState === TOGGLE.EXPANDED ||\n        this._state_.toggleState === TOGGLE.EXPANDING\n      ) {\n        this.toggle();\n      }\n    }\n    if (\n      this.props.expandEvent &&\n      this.props.expandEvent > prevProps.expandEvent\n    ) {\n      if (\n        this._state_.toggleState === TOGGLE.COLLAPSED ||\n        this._state_.toggleState === TOGGLE.COLLAPSING\n      ) {\n        this.toggle();\n      }\n    }\n    if (\n      this.props.toggleEvent &&\n      this.props.toggleEvent > prevProps.toggleEvent\n    ) {\n      this.toggle();\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.onUnmount &&\n      this.props.onUnmount({\n        toggleState: this.state.toggleState,\n      });\n    this._state_.timeout && cAF(this._state_.timeout);\n  }\n}\n\n// SlideToggle.propTypes = {\n//   render: PropTypes.func,\n//     children: PropTypes.func,\n//     duration: PropTypes.number,\n//     irreversible: PropTypes.bool,\n//     whenReversedUseBackwardEase: PropTypes.bool,\n//     noDisplayStyle: PropTypes.bool,\n//     noOverflowHidden: PropTypes.bool,\n//     bestPerformance: PropTypes.bool,\n//     interpolateOnReverse: PropTypes.bool,\n//     easeCollapse: PropTypes.func,\n//     easeExpand: PropTypes.func,\n//     collapsed: PropTypes.bool,\n//     onExpanded: PropTypes.func,\n//     onExpanding: PropTypes.func,\n//     onCollapsed: PropTypes.func,\n//     onCollapsing: PropTypes.func,\n//     scrollHeight: PropTypes.bool,\n// }\n"],"names":["root","window","global","rAF","requestAnimationFrame","bind","callback","setTimeout","cAF","cancelAnimationFrame","clearInterval","TOGGLE","Object","freeze","EXPANDED","COLLAPSED","EXPANDING","COLLAPSING","easeInOutCubic","t","Math","pow","util","toggleState","value","max","min","Date","now","duration","parseInt","next","prev","diff","abs","interpolated","SlideToggle","React","Component","collapsibleElement","this","props","collapsed","offsetHeight","_state_","hasReversed","range","progress","attr","getCollapsible","style","element","noOverflowHidden","overflow","setCollapsedState","initialState","irreversible","invokeCollapsing","onCollapsing","state","collapse","invokeExpanding","onExpanding","expand","updateInternalState","display","undefined","noDisplayStyle","updateCollapsible","startTime","elapsedTime","subtract","collapsible","height","boxHeight","GET_HEIGHT","startDirection","setState","onExpanded","setExpandedState","whenReversedUseBackwardEase","easeCollapse","easeExpand","bestPerformance","interpolateOnReverse","currentHeightValue","round","nextTick","onCollapsed","timeout","render","data","onToggle","toggle","setCollapsibleElement","isMoving","children","componentDidMount","onMount","componentDidUpdate","prevProps","prevState","collapseEvent","expandEvent","toggleEvent","componentWillUnmount","onUnmount"],"mappings":"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"}