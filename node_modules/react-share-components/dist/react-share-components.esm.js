import { createElement, Fragment } from 'react';
import QRCode from 'qrcode.react';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function getMetaContentByName(name) {
  return (document.getElementsByName(name)[0] || 0).content;
}

var getDefaultProps = function getDefaultProps() {
  var _window$location = window.location,
      url = _window$location.href,
      origin = _window$location.origin;
  var image = (document.images[0] || 0).src || '';
  var title = getMetaContentByName('title') || getMetaContentByName('Title') || document.title;
  var description = getMetaContentByName('description') || getMetaContentByName('Description') || '';
  var site = getMetaContentByName('site') || getMetaContentByName('Site') || document.title;
  var sites = ['weibo', 'qq', 'wechat', 'douban', 'qzone', 'linkedin', 'facebook', 'twitter', 'google'];
  return {
    url: url,
    origin: origin,
    title: title,
    image: image,
    description: description,
    summary: description,
    sites: sites,
    source: site,
    disabled: [],
    weiboKey: '',
    wechatQrcodeTitle: '微信扫一扫：分享',
    wechatQrcodeHelper: createElement(Fragment, null, createElement("p", null, "\u5FAE\u4FE1\u91CC\u70B9\u201C\u53D1\u73B0\u201D\uFF0C\u626B\u4E00\u4E0B"), createElement("p", null, "\u4E8C\u7EF4\u7801\u4FBF\u53EF\u5C06\u672C\u6587\u5206\u4EAB\u81F3\u670B\u53CB\u5708\u3002")),
    wechatQrcodeProps: {
      size: 100
    },
    className: '',
    style: {}
  };
};

var qsStringify = function qsStringify(obj) {
  return Object.keys(obj).reduce(function (res, field, key) {
    return res += "" + (key ? '&' : '?') + field + "=" + obj[field];
  }, '');
};

var encodeNames = ['url', 'title', 'description', 'image', 'site', 'origin', 'origin'];

var encodeOptions = function encodeOptions(options) {
  var data = encodeNames.reduce(function (res, name) {
    var _extends2;

    return _extends({}, res, (_extends2 = {}, _extends2[name] = encodeURIComponent(options[name]), _extends2));
  }, {});
  return _extends({}, options, data);
};

var filterSites = function filterSites(sites, exclude) {
  return sites.filter(function (item) {
    return !exclude.includes(item);
  });
};

var ReactShareComponents = function ReactShareComponents(_ref) {
  var children = _ref.children,
      rest = _objectWithoutPropertiesLoose(_ref, ["children"]);

  var _encodeOptions = encodeOptions(rest),
      title = _encodeOptions.title,
      description = _encodeOptions.description,
      image = _encodeOptions.image,
      source = _encodeOptions.source,
      origin = _encodeOptions.origin,
      url = _encodeOptions.url,
      _encodeOptions$sites = _encodeOptions.sites,
      sites = _encodeOptions$sites === void 0 ? [] : _encodeOptions$sites,
      summary = _encodeOptions.summary,
      disabled = _encodeOptions.disabled,
      weiboKey = _encodeOptions.weiboKey,
      wechatQrcodeTitle = _encodeOptions.wechatQrcodeTitle,
      wechatQrcodeHelper = _encodeOptions.wechatQrcodeHelper,
      _encodeOptions$wechat = _encodeOptions.wechatQrcodeProps,
      wechatQrcodeProps = _encodeOptions$wechat === void 0 ? {} : _encodeOptions$wechat,
      className = _encodeOptions.className,
      style = _encodeOptions.style;

  var templates = {
    qzone: "http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey" + qsStringify({
      url: url,
      title: title,
      desc: description,
      summary: summary,
      site: source,
      pics: image
    }),
    qq: "http://connect.qq.com/widget/shareqq/index.html" + qsStringify({
      url: url,
      title: title,
      source: source,
      desc: description,
      pics: image,
      summary: summary
    }),
    weibo: "https://service.weibo.com/share/share.php" + qsStringify({
      url: url,
      title: title,
      pic: image,
      appkey: weiboKey
    }),
    wechat: 'javascript:;',
    douban: "http://shuo.douban.com/!service/share" + qsStringify({
      href: url,
      name: title,
      text: description,
      image: image,
      starid: 0,
      aid: 0,
      style: 11
    }),
    linkedin: "http://www.linkedin.com/shareArticle" + qsStringify({
      mini: true,
      ro: true,
      title: title,
      url: url,
      summary: summary,
      source: source,
      armin: 'armin'
    }),
    facebook: "https://www.facebook.com/sharer/sharer.php" + qsStringify({
      u: url
    }),
    twitter: "https://twitter.com/intent/tweet" + qsStringify({
      text: title,
      url: url,
      via: origin
    }),
    google: "https://plus.google.com/share" + qsStringify({
      url: url
    })
  };
  return createElement("div", {
    className: "social-share" + (className ? " " + className : ''),
    style: style
  }, filterSites(sites, disabled).map(function (site, i) {
    var isWechat = Object.is(site, 'wechat');
    return createElement("a", Object.assign({
      key: i,
      className: "icon-" + site + " social-share-icon",
      href: isWechat ? '#' : templates[site]
    }, isWechat ? {
      onClick: function onClick(e) {
        return e.preventDefault();
      }
    } : {
      target: '_blank'
    }), isWechat && createElement("div", {
      className: "wechat-qrcode"
    }, createElement("h4", null, wechatQrcodeTitle), createElement("div", {
      className: "qrcode"
    }, createElement(QRCode, Object.assign({
      style: {
        verticalAlign: 'middle'
      },
      value: url
    }, wechatQrcodeProps))), createElement("div", {
      className: "help"
    }, wechatQrcodeHelper)));
  }), children);
};

ReactShareComponents.defaultProps = /*#__PURE__*/getDefaultProps();

export default ReactShareComponents;
//# sourceMappingURL=react-share-components.esm.js.map
