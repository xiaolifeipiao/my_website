{"version":3,"file":"static/runtime/react-refresh.js","sources":["webpack:///./node_modules/@next/react-refresh-utils/internal/helpers.js","webpack:///./node_modules/@next/react-refresh-utils/runtime.js","webpack:///./node_modules/react-refresh/cjs/react-refresh-runtime.development.js","webpack:///./node_modules/react-refresh/runtime.js"],"sourcesContent":["\"use strict\";\r\n/**\r\n * MIT License\r\n *\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nexports.__esModule = true;\r\n// This file is copied from the Metro JavaScript bundler, with minor tweaks for\r\n// webpack 4 compatibility.\r\n//\r\n// https://github.com/facebook/metro/blob/d6b9685c730d0d63577db40f41369157f28dfa3a/packages/metro/src/lib/polyfills/require.js\r\nvar runtime_1 = __importDefault(require(\"react-refresh/runtime\"));\r\nfunction registerExportsForReactRefresh(moduleExports, moduleID) {\r\n    runtime_1[\"default\"].register(moduleExports, moduleID + ' %exports%');\r\n    if (moduleExports == null || typeof moduleExports !== 'object') {\r\n        // Exit if we can't iterate over exports.\r\n        // (This is important for legacy environments.)\r\n        return;\r\n    }\r\n    for (var key in moduleExports) {\r\n        var exportValue = moduleExports[key];\r\n        var typeID = moduleID + ' %exports% ' + key;\r\n        runtime_1[\"default\"].register(exportValue, typeID);\r\n    }\r\n}\r\nfunction isReactRefreshBoundary(moduleExports) {\r\n    if (runtime_1[\"default\"].isLikelyComponentType(moduleExports)) {\r\n        return true;\r\n    }\r\n    if (moduleExports == null || typeof moduleExports !== 'object') {\r\n        // Exit if we can't iterate over exports.\r\n        return false;\r\n    }\r\n    var hasExports = false;\r\n    var areAllExportsComponents = true;\r\n    for (var key in moduleExports) {\r\n        hasExports = true;\r\n        if (key === '__esModule') {\r\n            continue;\r\n        }\r\n        var exportValue = moduleExports[key];\r\n        if (!runtime_1[\"default\"].isLikelyComponentType(exportValue)) {\r\n            areAllExportsComponents = false;\r\n        }\r\n    }\r\n    return hasExports && areAllExportsComponents;\r\n}\r\nfunction shouldInvalidateReactRefreshBoundary(prevExports, nextExports) {\r\n    var prevSignature = getRefreshBoundarySignature(prevExports);\r\n    var nextSignature = getRefreshBoundarySignature(nextExports);\r\n    if (prevSignature.length !== nextSignature.length) {\r\n        return true;\r\n    }\r\n    for (var i = 0; i < nextSignature.length; i++) {\r\n        if (prevSignature[i] !== nextSignature[i]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction getRefreshBoundarySignature(moduleExports) {\r\n    var signature = [];\r\n    signature.push(runtime_1[\"default\"].getFamilyByType(moduleExports));\r\n    if (moduleExports == null || typeof moduleExports !== 'object') {\r\n        // Exit if we can't iterate over exports.\r\n        // (This is important for legacy environments.)\r\n        return signature;\r\n    }\r\n    for (var key in moduleExports) {\r\n        if (key === '__esModule') {\r\n            continue;\r\n        }\r\n        var exportValue = moduleExports[key];\r\n        signature.push(key);\r\n        signature.push(runtime_1[\"default\"].getFamilyByType(exportValue));\r\n    }\r\n    return signature;\r\n}\r\nvar isUpdateScheduled = false;\r\nfunction scheduleUpdate() {\r\n    if (isUpdateScheduled) {\r\n        return;\r\n    }\r\n    function canApplyUpdate() {\r\n        return module.hot.status() === 'idle';\r\n    }\r\n    isUpdateScheduled = true;\r\n    setTimeout(function () {\r\n        isUpdateScheduled = false;\r\n        // Only trigger refresh if the webpack HMR state is idle\r\n        if (canApplyUpdate()) {\r\n            return runtime_1[\"default\"].performReactRefresh();\r\n        }\r\n        return scheduleUpdate();\r\n    }, 30);\r\n}\r\nexports[\"default\"] = {\r\n    registerExportsForReactRefresh: registerExportsForReactRefresh,\r\n    isReactRefreshBoundary: isReactRefreshBoundary,\r\n    shouldInvalidateReactRefreshBoundary: shouldInvalidateReactRefreshBoundary,\r\n    getRefreshBoundarySignature: getRefreshBoundarySignature,\r\n    scheduleUpdate: scheduleUpdate\r\n};\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nexports.__esModule = true;\r\nvar runtime_1 = __importDefault(require(\"react-refresh/runtime\"));\r\nvar helpers_1 = __importDefault(require(\"./internal/helpers\"));\r\n// Hook into ReactDOM initialization\r\nruntime_1[\"default\"].injectIntoGlobalHook(self);\r\n// noop fns to prevent runtime errors during initialization\r\nself.$RefreshReg$ = function () { };\r\nself.$RefreshSig$ = function () { return function (type) { return type; }; };\r\n// Register global helpers\r\nself.$RefreshHelpers$ = helpers_1[\"default\"];\r\n// Register a helper for module execution interception\r\nself.$RefreshInterceptModuleExecution$ = function (webpackModuleId) {\r\n    var prevRefreshReg = self.$RefreshReg$;\r\n    var prevRefreshSig = self.$RefreshSig$;\r\n    self.$RefreshReg$ = function (type, id) {\r\n        runtime_1[\"default\"].register(type, webpackModuleId + ' ' + id);\r\n    };\r\n    self.$RefreshSig$ = runtime_1[\"default\"].createSignatureFunctionForTransform;\r\n    // Modeled after `useEffect` cleanup pattern:\r\n    // https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\r\n    return function () {\r\n        self.$RefreshReg$ = prevRefreshReg;\r\n        self.$RefreshSig$ = prevRefreshSig;\r\n    };\r\n};\r\n","/** @license React v0.8.1\r\n * react-refresh-runtime.development.js\r\n *\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n'use strict';\r\n\r\n\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  (function() {\r\n'use strict';\r\n\r\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\r\n// nor polyfill, then a plain number is used for performance.\r\nvar hasSymbol = typeof Symbol === 'function' && Symbol.for;\r\nvar REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\r\nvar REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;\r\n\r\nvar PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // We never remove these associations.\r\n// It's OK to reference families, but use WeakMap/Set for types.\r\n\r\nvar allFamiliesByID = new Map();\r\nvar allFamiliesByType = new PossiblyWeakMap();\r\nvar allSignaturesByType = new PossiblyWeakMap(); // This WeakMap is read by React, so we only put families\r\n// that have actually been edited here. This keeps checks fast.\r\n// $FlowIssue\r\n\r\nvar updatedFamiliesByType = new PossiblyWeakMap(); // This is cleared on every performReactRefresh() call.\r\n// It is an array of [Family, NextType] tuples.\r\n\r\nvar pendingUpdates = []; // This is injected by the renderer via DevTools global hook.\r\n\r\nvar helpersByRendererID = new Map();\r\nvar helpersByRoot = new Map(); // We keep track of mounted roots so we can schedule updates.\r\n\r\nvar mountedRoots = new Set(); // If a root captures an error, we remember it so we can retry on edit.\r\n\r\nvar failedRoots = new Set(); // In environments that support WeakMap, we also remember the last element for every root.\r\n// It needs to be weak because we do this even for roots that failed to mount.\r\n// If there is no WeakMap, we won't attempt to do retrying.\r\n// $FlowIssue\r\n\r\nvar rootElements = // $FlowIssue\r\ntypeof WeakMap === 'function' ? new WeakMap() : null;\r\nvar isPerformingRefresh = false;\r\n\r\nfunction computeFullKey(signature) {\r\n  if (signature.fullKey !== null) {\r\n    return signature.fullKey;\r\n  }\r\n\r\n  var fullKey = signature.ownKey;\r\n  var hooks;\r\n\r\n  try {\r\n    hooks = signature.getCustomHooks();\r\n  } catch (err) {\r\n    // This can happen in an edge case, e.g. if expression like Foo.useSomething\r\n    // depends on Foo which is lazily initialized during rendering.\r\n    // In that case just assume we'll have to remount.\r\n    signature.forceReset = true;\r\n    signature.fullKey = fullKey;\r\n    return fullKey;\r\n  }\r\n\r\n  for (var i = 0; i < hooks.length; i++) {\r\n    var hook = hooks[i];\r\n\r\n    if (typeof hook !== 'function') {\r\n      // Something's wrong. Assume we need to remount.\r\n      signature.forceReset = true;\r\n      signature.fullKey = fullKey;\r\n      return fullKey;\r\n    }\r\n\r\n    var nestedHookSignature = allSignaturesByType.get(hook);\r\n\r\n    if (nestedHookSignature === undefined) {\r\n      // No signature means Hook wasn't in the source code, e.g. in a library.\r\n      // We'll skip it because we can assume it won't change during this session.\r\n      continue;\r\n    }\r\n\r\n    var nestedHookKey = computeFullKey(nestedHookSignature);\r\n\r\n    if (nestedHookSignature.forceReset) {\r\n      signature.forceReset = true;\r\n    }\r\n\r\n    fullKey += '\\n---\\n' + nestedHookKey;\r\n  }\r\n\r\n  signature.fullKey = fullKey;\r\n  return fullKey;\r\n}\r\n\r\nfunction haveEqualSignatures(prevType, nextType) {\r\n  var prevSignature = allSignaturesByType.get(prevType);\r\n  var nextSignature = allSignaturesByType.get(nextType);\r\n\r\n  if (prevSignature === undefined && nextSignature === undefined) {\r\n    return true;\r\n  }\r\n\r\n  if (prevSignature === undefined || nextSignature === undefined) {\r\n    return false;\r\n  }\r\n\r\n  if (computeFullKey(prevSignature) !== computeFullKey(nextSignature)) {\r\n    return false;\r\n  }\r\n\r\n  if (nextSignature.forceReset) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction isReactClass(type) {\r\n  return type.prototype && type.prototype.isReactComponent;\r\n}\r\n\r\nfunction canPreserveStateBetween(prevType, nextType) {\r\n  if (isReactClass(prevType) || isReactClass(nextType)) {\r\n    return false;\r\n  }\r\n\r\n  if (haveEqualSignatures(prevType, nextType)) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction resolveFamily(type) {\r\n  // Only check updated types to keep lookups fast.\r\n  return updatedFamiliesByType.get(type);\r\n} // If we didn't care about IE11, we could use new Map/Set(iterable).\r\n\r\n\r\nfunction cloneMap(map) {\r\n  var clone = new Map();\r\n  map.forEach(function (value, key) {\r\n    clone.set(key, value);\r\n  });\r\n  return clone;\r\n}\r\n\r\nfunction cloneSet(set) {\r\n  var clone = new Set();\r\n  set.forEach(function (value) {\r\n    clone.add(value);\r\n  });\r\n  return clone;\r\n}\r\n\r\nfunction performReactRefresh() {\r\n\r\n  if (pendingUpdates.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  if (isPerformingRefresh) {\r\n    return null;\r\n  }\r\n\r\n  isPerformingRefresh = true;\r\n\r\n  try {\r\n    var staleFamilies = new Set();\r\n    var updatedFamilies = new Set();\r\n    var updates = pendingUpdates;\r\n    pendingUpdates = [];\r\n    updates.forEach(function (_ref) {\r\n      var family = _ref[0],\r\n          nextType = _ref[1];\r\n      // Now that we got a real edit, we can create associations\r\n      // that will be read by the React reconciler.\r\n      var prevType = family.current;\r\n      updatedFamiliesByType.set(prevType, family);\r\n      updatedFamiliesByType.set(nextType, family);\r\n      family.current = nextType; // Determine whether this should be a re-render or a re-mount.\r\n\r\n      if (canPreserveStateBetween(prevType, nextType)) {\r\n        updatedFamilies.add(family);\r\n      } else {\r\n        staleFamilies.add(family);\r\n      }\r\n    }); // TODO: rename these fields to something more meaningful.\r\n\r\n    var update = {\r\n      updatedFamilies: updatedFamilies,\r\n      // Families that will re-render preserving state\r\n      staleFamilies: staleFamilies // Families that will be remounted\r\n\r\n    };\r\n    helpersByRendererID.forEach(function (helpers) {\r\n      // Even if there are no roots, set the handler on first update.\r\n      // This ensures that if *new* roots are mounted, they'll use the resolve handler.\r\n      helpers.setRefreshHandler(resolveFamily);\r\n    });\r\n    var didError = false;\r\n    var firstError = null; // We snapshot maps and sets that are mutated during commits.\r\n    // If we don't do this, there is a risk they will be mutated while\r\n    // we iterate over them. For example, trying to recover a failed root\r\n    // may cause another root to be added to the failed list -- an infinite loop.\r\n\r\n    var failedRootsSnapshot = cloneSet(failedRoots);\r\n    var mountedRootsSnapshot = cloneSet(mountedRoots);\r\n    var helpersByRootSnapshot = cloneMap(helpersByRoot);\r\n    failedRootsSnapshot.forEach(function (root) {\r\n      var helpers = helpersByRootSnapshot.get(root);\r\n\r\n      if (helpers === undefined) {\r\n        throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');\r\n      }\r\n\r\n      if (!failedRoots.has(root)) {// No longer failed.\r\n      }\r\n\r\n      if (rootElements === null) {\r\n        return;\r\n      }\r\n\r\n      if (!rootElements.has(root)) {\r\n        return;\r\n      }\r\n\r\n      var element = rootElements.get(root);\r\n\r\n      try {\r\n        helpers.scheduleRoot(root, element);\r\n      } catch (err) {\r\n        if (!didError) {\r\n          didError = true;\r\n          firstError = err;\r\n        } // Keep trying other roots.\r\n\r\n      }\r\n    });\r\n    mountedRootsSnapshot.forEach(function (root) {\r\n      var helpers = helpersByRootSnapshot.get(root);\r\n\r\n      if (helpers === undefined) {\r\n        throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');\r\n      }\r\n\r\n      if (!mountedRoots.has(root)) {// No longer mounted.\r\n      }\r\n\r\n      try {\r\n        helpers.scheduleRefresh(root, update);\r\n      } catch (err) {\r\n        if (!didError) {\r\n          didError = true;\r\n          firstError = err;\r\n        } // Keep trying other roots.\r\n\r\n      }\r\n    });\r\n\r\n    if (didError) {\r\n      throw firstError;\r\n    }\r\n\r\n    return update;\r\n  } finally {\r\n    isPerformingRefresh = false;\r\n  }\r\n}\r\nfunction register(type, id) {\r\n  {\r\n    if (type === null) {\r\n      return;\r\n    }\r\n\r\n    if (typeof type !== 'function' && typeof type !== 'object') {\r\n      return;\r\n    } // This can happen in an edge case, e.g. if we register\r\n    // return value of a HOC but it returns a cached component.\r\n    // Ignore anything but the first registration for each type.\r\n\r\n\r\n    if (allFamiliesByType.has(type)) {\r\n      return;\r\n    } // Create family or remember to update it.\r\n    // None of this bookkeeping affects reconciliation\r\n    // until the first performReactRefresh() call above.\r\n\r\n\r\n    var family = allFamiliesByID.get(id);\r\n\r\n    if (family === undefined) {\r\n      family = {\r\n        current: type\r\n      };\r\n      allFamiliesByID.set(id, family);\r\n    } else {\r\n      pendingUpdates.push([family, type]);\r\n    }\r\n\r\n    allFamiliesByType.set(type, family); // Visit inner types because we might not have registered them.\r\n\r\n    if (typeof type === 'object' && type !== null) {\r\n      switch (type.$$typeof) {\r\n        case REACT_FORWARD_REF_TYPE:\r\n          register(type.render, id + '$render');\r\n          break;\r\n\r\n        case REACT_MEMO_TYPE:\r\n          register(type.type, id + '$type');\r\n          break;\r\n      }\r\n    }\r\n  }\r\n}\r\nfunction setSignature(type, key) {\r\n  var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\r\n  var getCustomHooks = arguments.length > 3 ? arguments[3] : undefined;\r\n\r\n  {\r\n    allSignaturesByType.set(type, {\r\n      forceReset: forceReset,\r\n      ownKey: key,\r\n      fullKey: null,\r\n      getCustomHooks: getCustomHooks || function () {\r\n        return [];\r\n      }\r\n    });\r\n  }\r\n} // This is lazily called during first render for a type.\r\n// It captures Hook list at that time so inline requires don't break comparisons.\r\n\r\nfunction collectCustomHooksForSignature(type) {\r\n  {\r\n    var signature = allSignaturesByType.get(type);\r\n\r\n    if (signature !== undefined) {\r\n      computeFullKey(signature);\r\n    }\r\n  }\r\n}\r\nfunction getFamilyByID(id) {\r\n  {\r\n    return allFamiliesByID.get(id);\r\n  }\r\n}\r\nfunction getFamilyByType(type) {\r\n  {\r\n    return allFamiliesByType.get(type);\r\n  }\r\n}\r\nfunction findAffectedHostInstances(families) {\r\n  {\r\n    var affectedInstances = new Set();\r\n    mountedRoots.forEach(function (root) {\r\n      var helpers = helpersByRoot.get(root);\r\n\r\n      if (helpers === undefined) {\r\n        throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');\r\n      }\r\n\r\n      var instancesForRoot = helpers.findHostInstancesForRefresh(root, families);\r\n      instancesForRoot.forEach(function (inst) {\r\n        affectedInstances.add(inst);\r\n      });\r\n    });\r\n    return affectedInstances;\r\n  }\r\n}\r\nfunction injectIntoGlobalHook(globalObject) {\r\n  {\r\n    // For React Native, the global hook will be set up by require('react-devtools-core').\r\n    // That code will run before us. So we need to monkeypatch functions on existing hook.\r\n    // For React Web, the global hook will be set up by the extension.\r\n    // This will also run before us.\r\n    var hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;\r\n\r\n    if (hook === undefined) {\r\n      // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.\r\n      // Note that in this case it's important that renderer code runs *after* this method call.\r\n      // Otherwise, the renderer will think that there is no global hook, and won't do the injection.\r\n      var nextID = 0;\r\n      globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {\r\n        renderers: new Map(),\r\n        supportsFiber: true,\r\n        inject: function (injected) {\r\n          return nextID++;\r\n        },\r\n        onScheduleFiberRoot: function (id, root, children) {},\r\n        onCommitFiberRoot: function (id, root, maybePriorityLevel, didError) {},\r\n        onCommitFiberUnmount: function () {}\r\n      };\r\n    } // Here, we just want to get a reference to scheduleRefresh.\r\n\r\n\r\n    var oldInject = hook.inject;\r\n\r\n    hook.inject = function (injected) {\r\n      var id = oldInject.apply(this, arguments);\r\n\r\n      if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') {\r\n        // This version supports React Refresh.\r\n        helpersByRendererID.set(id, injected);\r\n      }\r\n\r\n      return id;\r\n    }; // Do the same for any already injected roots.\r\n    // This is useful if ReactDOM has already been initialized.\r\n    // https://github.com/facebook/react/issues/17626\r\n\r\n\r\n    hook.renderers.forEach(function (injected, id) {\r\n      if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') {\r\n        // This version supports React Refresh.\r\n        helpersByRendererID.set(id, injected);\r\n      }\r\n    }); // We also want to track currently mounted roots.\r\n\r\n    var oldOnCommitFiberRoot = hook.onCommitFiberRoot;\r\n\r\n    var oldOnScheduleFiberRoot = hook.onScheduleFiberRoot || function () {};\r\n\r\n    hook.onScheduleFiberRoot = function (id, root, children) {\r\n      if (!isPerformingRefresh) {\r\n        // If it was intentionally scheduled, don't attempt to restore.\r\n        // This includes intentionally scheduled unmounts.\r\n        failedRoots.delete(root);\r\n\r\n        if (rootElements !== null) {\r\n          rootElements.set(root, children);\r\n        }\r\n      }\r\n\r\n      return oldOnScheduleFiberRoot.apply(this, arguments);\r\n    };\r\n\r\n    hook.onCommitFiberRoot = function (id, root, maybePriorityLevel, didError) {\r\n      var helpers = helpersByRendererID.get(id);\r\n\r\n      if (helpers === undefined) {\r\n        return;\r\n      }\r\n\r\n      helpersByRoot.set(root, helpers);\r\n      var current = root.current;\r\n      var alternate = current.alternate; // We need to determine whether this root has just (un)mounted.\r\n      // This logic is copy-pasted from similar logic in the DevTools backend.\r\n      // If this breaks with some refactoring, you'll want to update DevTools too.\r\n\r\n      if (alternate !== null) {\r\n        var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null;\r\n        var isMounted = current.memoizedState != null && current.memoizedState.element != null;\r\n\r\n        if (!wasMounted && isMounted) {\r\n          // Mount a new root.\r\n          mountedRoots.add(root);\r\n          failedRoots.delete(root);\r\n        } else if (wasMounted && isMounted) ; else if (wasMounted && !isMounted) {\r\n          // Unmount an existing root.\r\n          mountedRoots.delete(root);\r\n\r\n          if (didError) {\r\n            // We'll remount it on future edits.\r\n            failedRoots.add(root);\r\n          } else {\r\n            helpersByRoot.delete(root);\r\n          }\r\n        } else if (!wasMounted && !isMounted) {\r\n          if (didError) {\r\n            // We'll remount it on future edits.\r\n            failedRoots.add(root);\r\n          }\r\n        }\r\n      } else {\r\n        // Mount a new root.\r\n        mountedRoots.add(root);\r\n      }\r\n\r\n      return oldOnCommitFiberRoot.apply(this, arguments);\r\n    };\r\n  }\r\n}\r\nfunction hasUnrecoverableErrors() {\r\n  // TODO: delete this after removing dependency in RN.\r\n  return false;\r\n} // Exposed for testing.\r\n\r\nfunction _getMountedRootCount() {\r\n  {\r\n    return mountedRoots.size;\r\n  }\r\n} // This is a wrapper over more primitive functions for setting signature.\r\n// Signatures let us decide whether the Hook order has changed on refresh.\r\n//\r\n// This function is intended to be used as a transform target, e.g.:\r\n// var _s = createSignatureFunctionForTransform()\r\n//\r\n// function Hello() {\r\n//   const [foo, setFoo] = useState(0);\r\n//   const value = useCustomHook();\r\n//   _s(); /* Second call triggers collecting the custom Hook list.\r\n//          * This doesn't happen during the module evaluation because we\r\n//          * don't want to change the module order with inline requires.\r\n//          * Next calls are noops. */\r\n//   return <h1>Hi</h1>;\r\n// }\r\n//\r\n// /* First call specifies the signature: */\r\n// _s(\r\n//   Hello,\r\n//   'useState{[foo, setFoo]}(0)',\r\n//   () => [useCustomHook], /* Lazy to avoid triggering inline requires */\r\n// );\r\n\r\nfunction createSignatureFunctionForTransform() {\r\n  {\r\n    // We'll fill in the signature in two steps.\r\n    // First, we'll know the signature itself. This happens outside the component.\r\n    // Then, we'll know the references to custom Hooks. This happens inside the component.\r\n    // After that, the returned function will be a fast path no-op.\r\n    var status = 'needsSignature';\r\n    var savedType;\r\n    var hasCustomHooks;\r\n    return function (type, key, forceReset, getCustomHooks) {\r\n      switch (status) {\r\n        case 'needsSignature':\r\n          if (type !== undefined) {\r\n            // If we received an argument, this is the initial registration call.\r\n            savedType = type;\r\n            hasCustomHooks = typeof getCustomHooks === 'function';\r\n            setSignature(type, key, forceReset, getCustomHooks); // The next call we expect is from inside a function, to fill in the custom Hooks.\r\n\r\n            status = 'needsCustomHooks';\r\n          }\r\n\r\n          break;\r\n\r\n        case 'needsCustomHooks':\r\n          if (hasCustomHooks) {\r\n            collectCustomHooksForSignature(savedType);\r\n          }\r\n\r\n          status = 'resolved';\r\n          break;\r\n      }\r\n\r\n      return type;\r\n    };\r\n  }\r\n}\r\nfunction isLikelyComponentType(type) {\r\n  {\r\n    switch (typeof type) {\r\n      case 'function':\r\n        {\r\n          // First, deal with classes.\r\n          if (type.prototype != null) {\r\n            if (type.prototype.isReactComponent) {\r\n              // React class.\r\n              return true;\r\n            }\r\n\r\n            var ownNames = Object.getOwnPropertyNames(type.prototype);\r\n\r\n            if (ownNames.length > 1 || ownNames[0] !== 'constructor') {\r\n              // This looks like a class.\r\n              return false;\r\n            } // eslint-disable-next-line no-proto\r\n\r\n\r\n            if (type.prototype.__proto__ !== Object.prototype) {\r\n              // It has a superclass.\r\n              return false;\r\n            } // Pass through.\r\n            // This looks like a regular function with empty prototype.\r\n\r\n          } // For plain functions and arrows, use name as a heuristic.\r\n\r\n\r\n          var name = type.name || type.displayName;\r\n          return typeof name === 'string' && /^[A-Z]/.test(name);\r\n        }\r\n\r\n      case 'object':\r\n        {\r\n          if (type != null) {\r\n            switch (type.$$typeof) {\r\n              case REACT_FORWARD_REF_TYPE:\r\n              case REACT_MEMO_TYPE:\r\n                // Definitely React components.\r\n                return true;\r\n\r\n              default:\r\n                return false;\r\n            }\r\n          }\r\n\r\n          return false;\r\n        }\r\n\r\n      default:\r\n        {\r\n          return false;\r\n        }\r\n    }\r\n  }\r\n}\r\n\r\nvar ReactFreshRuntime = /*#__PURE__*/Object.freeze({\r\n  __proto__: null,\r\n  performReactRefresh: performReactRefresh,\r\n  register: register,\r\n  setSignature: setSignature,\r\n  collectCustomHooksForSignature: collectCustomHooksForSignature,\r\n  getFamilyByID: getFamilyByID,\r\n  getFamilyByType: getFamilyByType,\r\n  findAffectedHostInstances: findAffectedHostInstances,\r\n  injectIntoGlobalHook: injectIntoGlobalHook,\r\n  hasUnrecoverableErrors: hasUnrecoverableErrors,\r\n  _getMountedRootCount: _getMountedRootCount,\r\n  createSignatureFunctionForTransform: createSignatureFunctionForTransform,\r\n  isLikelyComponentType: isLikelyComponentType\r\n});\r\n\r\n// This is hacky but makes it work with both Rollup and Jest.\r\n\r\n\r\nvar runtime = ReactFreshRuntime.default || ReactFreshRuntime;\r\n\r\nmodule.exports = runtime;\r\n  })();\r\n}\r\n","'use strict';\r\n\r\nif (process.env.NODE_ENV === 'production') {\r\n  module.exports = require('./cjs/react-refresh-runtime.production.min.js');\r\n} else {\r\n  module.exports = require('./cjs/react-refresh-runtime.development.js');\r\n}\r\n"],"mappingsnBA;AACA;AACA,aAEA;AACA;AACA;;;;;A","sourceRoot":""}