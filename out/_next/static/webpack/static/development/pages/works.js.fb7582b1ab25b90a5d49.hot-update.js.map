{"version":3,"file":"static/webpack/static\\development\\pages\\works.js.fb7582b1ab25b90a5d49.hot-update.js","sources":["webpack:///./src/pages/works.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useContext } from 'react'\r\nimport classNames from 'classnames'\r\nimport Lazyload from 'react-lazyload'\r\nimport { StickyContainer, Sticky } from '@components/react-sticky'\r\nimport InfiniteScroll from 'react-infinite-scroller'\r\n\r\nimport styles from '@styles/sass/page/works.module.scss'\r\n\r\nimport {\r\n  findDataIndex,\r\n  getStyle,\r\n  paginationAfterData,\r\n  isValidArray,\r\n} from '@scripts/utils'\r\nimport { DEFAULT_PAGE_SIZE } from '@scripts/constant'\r\nimport { worksInfo } from '@store/mock'\r\n\r\nimport { CtxStore } from '../components/context'\r\n\r\nimport { Banner, SvgIcon, Loading } from '@components/common'\r\nimport { LayoutMain } from '@components/layout'\r\n\r\nimport { ReactComponent as SvgPaperPlane } from '@fonts/svg/merge/paper-plane.svg'\r\n\r\nconst { works_wrapper, works_list } = styles\r\n\r\nconst worksKeys = Object.keys(worksInfo)\r\nconst DEFAULT_ACTIVE_KEY = worksKeys[0]\r\n\r\nconst tabHeadInfo: {\r\n  num: number\r\n  title: string\r\n  key: string\r\n  isHot?: boolean\r\n}[] = worksKeys.map((key) => {\r\n  const { data, ...rest } = worksInfo[key]\r\n  return {\r\n    key,\r\n    num: data.length,\r\n    ...rest,\r\n  }\r\n})\r\n\r\nconst TabsWorksHead: React.FC<{\r\n  onSwitchTab?: (key: string) => void\r\n  style?: React.CSSProperties\r\n}> = ({ onSwitchTab, style }) => {\r\n  const { store } = useContext(CtxStore)\r\n  const { bodyStyle } = store\r\n  const elTabs = useRef<HTMLDivElement>(null)\r\n  const [activeKey, setActiveKey] = useState(DEFAULT_ACTIVE_KEY)\r\n  const [activeInfo, setActiveInfo] = useState({\r\n    width: 0,\r\n    offsetX: 0,\r\n  })\r\n\r\n  const { width, offsetX } = activeInfo\r\n\r\n  const onSelected = (key) => {\r\n    return (e: React.MouseEvent<HTMLAnchorElement>) => {\r\n      e.preventDefault()\r\n      setActiveKey(key)\r\n      const { offsetWidth, offsetLeft } = e.currentTarget\r\n      setActiveInfo((v) => ({\r\n        ...v,\r\n        width: offsetWidth,\r\n        offsetX: offsetLeft,\r\n      }))\r\n      onSwitchTab && onSwitchTab(key)\r\n    }\r\n  }\r\n\r\n  const initialTabsActive = () => {\r\n    const { current } = elTabs\r\n    const index = findDataIndex({\r\n      data: tabHeadInfo,\r\n      key: 'key',\r\n      target: activeKey,\r\n    })\r\n    if (Object.is(index, -1)) return\r\n    const node = current?.querySelectorAll('a')[index]\r\n    node?.click()\r\n  }\r\n\r\n  useEffect(initialTabsActive, [])\r\n\r\n  return (\r\n    <Sticky>\r\n      {({ style, isSticky }) => {\r\n        return (\r\n          <div\r\n            style={{\r\n              ...style,\r\n              ...(isSticky && {\r\n                boxShadow: 'rgb(0, 0, 0,.24) 0px 0px 4px',\r\n                ...bodyStyle,\r\n              }),\r\n            }}\r\n            className=\"tac tabs-wrapper z-1\"\r\n          >\r\n            <div ref={elTabs} className=\"inline-block pos-rel font-size-sm\">\r\n              {tabHeadInfo.map(({ title, num, key, isHot }) => (\r\n                <a\r\n                  key={key}\r\n                  href=\"#\"\r\n                  onClick={onSelected(key)}\r\n                  className={classNames('m-l-r-xl p-b-xxs', {\r\n                    'color-primary active': Object.is(activeKey, key),\r\n                  })}\r\n                >\r\n                  {title} ({' '}\r\n                  <span className=\"font-family-georgia font-size-xxl\">\r\n                    {num}\r\n                    {isHot && (\r\n                      <span className=\"hot pos-rel\">\r\n                        <em\r\n                          style={{\r\n                            top: 4,\r\n                          }}\r\n                        />\r\n                      </span>\r\n                    )}\r\n                  </span>{' '}\r\n                  )\r\n                </a>\r\n              ))}\r\n              <div\r\n                style={{\r\n                  width: width,\r\n                  transform: `translateX(${offsetX}px)`,\r\n                  transition: '.5s',\r\n                }}\r\n                className=\"tabs-active\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        )\r\n      }}\r\n    </Sticky>\r\n  )\r\n}\r\n\r\ntype TOnEventFunc = (event: React.MouseEvent) => void\r\ntype TOnMouseEventFunc = (e: React.MouseEvent, isTop?: boolean) => void\r\n\r\nconst WorkItem: React.FC<{\r\n  item?: Dictionary\r\n  onVisitContent?: TOnEventFunc\r\n  onMouseIn?: TOnMouseEventFunc\r\n  onMouseOut?: TOnMouseEventFunc\r\n}> = ({ item = {}, onVisitContent, onMouseIn, onMouseOut }) => {\r\n  const {\r\n    category,\r\n    desc,\r\n    qrcodeImg,\r\n    title,\r\n    searchKeyword,\r\n    visible,\r\n    links,\r\n  } = item\r\n\r\n  const visitLinksProps = {\r\n    href: links || '#',\r\n    title,\r\n    ...(links\r\n      ? {\r\n          target: '_blank',\r\n        }\r\n      : {\r\n          onClick: onVisitContent,\r\n        }),\r\n  }\r\n\r\n  return (\r\n    <figure className=\"item\">\r\n      <a className=\"block\" {...visitLinksProps}>\r\n        <Lazyload\r\n          once\r\n          throttle={200}\r\n          height={400}\r\n          placeholder={\r\n            <img\r\n              // className=\"w-h-100\" //勿设置\r\n              src={`/static/placeholder-pic.png`}\r\n              alt=\"\"\r\n            />\r\n          }\r\n        >\r\n          <img\r\n            className=\"photo\"\r\n            // src={require('@images/' + item.imgSrc)}\r\n            src={`/static/${item.imgSrc}`}\r\n            alt={title}\r\n          />\r\n        </Lazyload>\r\n        <div\r\n          className=\"mouse-move-layer t-0\"\r\n          onMouseEnter={(e) => onMouseIn && onMouseIn(e, true)}\r\n          onMouseLeave={(e) => onMouseOut && onMouseOut(e, true)}\r\n        />\r\n        <div\r\n          className=\"mouse-move-layer b-0\"\r\n          onMouseEnter={onMouseIn}\r\n          onMouseLeave={onMouseOut}\r\n        />\r\n      </a>\r\n      <figcaption className=\"content\">\r\n        <h3>{title}</h3>\r\n        <p>{desc}</p>\r\n        <div layout-align=\"space-between center\">\r\n          <span className=\"category\">{category}</span>\r\n          <a className=\"color-primary bdb-line-primary\" {...visitLinksProps}>\r\n            <span className=\"vam\">访问链接</span>\r\n            <SvgIcon className=\"m-l-xs\" component={SvgPaperPlane} />\r\n          </a>\r\n        </div>\r\n      </figcaption>\r\n      {(qrcodeImg || searchKeyword) && (\r\n        <div\r\n          style={{\r\n            display: visible ? 'block' : 'none',\r\n          }}\r\n          className=\"mask-root pos-abs t-0 w-h-100\"\r\n        >\r\n          <div onClick={onVisitContent} className=\"mask-layer w-h-100\" />\r\n          {qrcodeImg ? (\r\n            <img\r\n              className=\"pos-abs tblr-0 m-auto\"\r\n              // src={require(`@images/${qrcodeImg}`)}\r\n              src={`/static/${qrcodeImg}`}\r\n              alt=\"\"\r\n            />\r\n          ) : (\r\n            <div className=\"app-dec pos-abs color-white font-size-md\">\r\n              进入微信APP-{'>'}点击发现-{'>'}选择小程序搜-{'>'}索 \"\r\n              <span className=\"color-primary\"> {searchKeyword} </span>\" 访问\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </figure>\r\n  )\r\n}\r\n\r\nconst TabsWorksContent: React.FC<{\r\n  activeKey?: string\r\n}> = ({ activeKey = '' }) => {\r\n  const [info, setInfo] = useState<Dictionary>({\r\n    data: [],\r\n    hasNextPage: true,\r\n    loading: true,\r\n  })\r\n  const { data, hasNextPage, loading } = info\r\n\r\n  const onVisitContent = (item) => {\r\n    return (e) => {\r\n      setInfo((v) => ({\r\n        ...v,\r\n        data: data.map((v) => ({\r\n          ...v,\r\n          ...(Object.is(v.imgSrc, item.imgSrc) && {\r\n            visible: !v.visible,\r\n          }),\r\n        })),\r\n      }))\r\n      e.preventDefault()\r\n    }\r\n  }\r\n\r\n  const onMouseIn: TOnMouseEventFunc = (e, isTop) => {\r\n    const currentDom = e.currentTarget\r\n    const parentDom = currentDom.parentNode\r\n    const domImg = parentDom?.querySelector<HTMLImageElement>('.photo')\r\n    if (!domImg) return\r\n    // const { clientY } = e\r\n    // const { top, height } = currentDom.getBoundingClientRect()\r\n    // const halfHeight = height / 2\r\n    // const isTop = halfHeight > clientY - top //移入位置\r\n    const marginTopVal = parseFloat(getStyle(domImg).marginTop)\r\n    const hiddenHeight =\r\n      (domImg.getBoundingClientRect().height || 0) -\r\n      parseInt(getStyle(parentDom).maxHeight) //计算隐藏的高度\r\n\r\n    const moveTime = 150 //值越大、移动越快，反之\r\n    const moveSpeed = hiddenHeight / moveTime\r\n    const restMovDistance =\r\n      (isTop ? -marginTopVal : hiddenHeight + marginTopVal) * moveSpeed //移动的距离\r\n    const time = (restMovDistance / hiddenHeight).toFixed(2) //剩余距离需要移动的时间\r\n\r\n    domImg.style.cssText = `margin-top:${\r\n      isTop ? 0 : -hiddenHeight\r\n    }px;transition:margin-top ${time}s linear;`\r\n  }\r\n\r\n  const onMouseOut: TOnMouseEventFunc = (e) => {\r\n    const currentDom = e.currentTarget\r\n    const domImg = currentDom.parentNode?.querySelector<HTMLImageElement>(\r\n      '.photo'\r\n    )\r\n    if (!domImg) return\r\n    const marginTopVal = getStyle(domImg).marginTop\r\n    domImg.style.cssText = `margin-top:${marginTopVal};`\r\n  }\r\n\r\n  const fetchData = (pageIndex: number = 1) => {\r\n    const result = worksInfo[activeKey]\r\n    if (!result) return\r\n    paginationAfterData({\r\n      query: {\r\n        pageIndex,\r\n      },\r\n      data: result.data,\r\n    })\r\n      .then((res) => {\r\n        const { data: list } = res\r\n        const isFirstPage = Object.is(pageIndex, 1)\r\n        setInfo((v) => ({\r\n          ...v,\r\n          ...res,\r\n          data: isFirstPage ? list : [...data, ...list],\r\n        }))\r\n      })\r\n      .catch(() => {\r\n        setInfo((v) => ({\r\n          ...v,\r\n          hasNextPage: false,\r\n        }))\r\n      })\r\n      .finally(() => {\r\n        setInfo((v) => ({\r\n          ...v,\r\n          loading: false,\r\n        }))\r\n      })\r\n  }\r\n\r\n  useEffect(() => {\r\n    setInfo((v) => ({ ...v, hasNextPage: true, loading: true }))\r\n    fetchData()\r\n  }, [activeKey])\r\n\r\n  const loadFunc = (page) => {\r\n    if (!hasNextPage) return\r\n    fetchData(page)\r\n  }\r\n\r\n  return (\r\n    <div className={works_list}>\r\n      {loading ? (\r\n        <Loading className=\"tac p-b-xxl\" />\r\n      ) : (\r\n        <InfiniteScroll\r\n          pageStart={0}\r\n          loadMore={loadFunc}\r\n          hasMore={hasNextPage}\r\n          loader={<Loading key=\"0\" className=\"tac p-b-xxl\" />}\r\n        >\r\n          {data.map((item) => {\r\n            const { imgSrc } = item\r\n            return (\r\n              <WorkItem\r\n                key={imgSrc}\r\n                onVisitContent={onVisitContent(item)}\r\n                onMouseIn={onMouseIn}\r\n                onMouseOut={onMouseOut}\r\n                item={item}\r\n              />\r\n            )\r\n          })}\r\n          {!hasNextPage &&\r\n            isValidArray(data) &&\r\n            data.length >= DEFAULT_PAGE_SIZE && (\r\n              <div className=\"tac p-b-xxl\">没有更多了⊙﹏⊙</div>\r\n            )}\r\n        </InfiniteScroll>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\ninterface IWorksProps {}\r\n\r\nconst Works: React.FC<IWorksProps> = () => {\r\n  const [activeKey, setActiveKey] = useState('')\r\n\r\n  return (\r\n    <section className={works_wrapper}>\r\n      <Banner />\r\n      <LayoutMain\r\n        pageTitleProps={{\r\n          zhName: (\r\n            <>\r\n              <span className=\"font-family-georgia\">6</span>个作品\r\n            </>\r\n          ),\r\n          enName: 'more than 40 works',\r\n        }}\r\n      >\r\n        <StickyContainer>\r\n          <TabsWorksHead onSwitchTab={(key) => setActiveKey(key)} />\r\n          {activeKey && <TabsWorksContent activeKey={activeKey} />}\r\n        </StickyContainer>\r\n      </LayoutMain>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Works\r\n"],"mappings":"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","sourceRoot":""}