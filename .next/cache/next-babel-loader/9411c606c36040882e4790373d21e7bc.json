{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nexport default class Sticky extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    _defineProperty(this, \"state\", {\n      isSticky: false,\n      wasSticky: false,\n      style: {}\n    });\n\n    _defineProperty(this, \"handleContainerEvent\", ({\n      distanceFromTop,\n      distanceFromBottom,\n      eventSource\n    }) => {\n      const parent = this.context.getParent();\n      let preventingStickyStateChanges = false;\n\n      if (this.props.relative) {\n        preventingStickyStateChanges = eventSource !== parent;\n        distanceFromTop = -(eventSource.scrollTop + eventSource.offsetTop) + this.placeholder.offsetTop;\n      }\n\n      const placeholderClientRect = this.placeholder.getBoundingClientRect();\n      const contentClientRect = this.content.getBoundingClientRect();\n      const calculatedHeight = contentClientRect.height;\n      const bottomDifference = distanceFromBottom - this.props.bottomOffset - calculatedHeight;\n      const wasSticky = !!this.state.isSticky;\n      const isSticky = preventingStickyStateChanges ? wasSticky : distanceFromTop <= -this.props.topOffset && distanceFromBottom > -this.props.bottomOffset;\n      distanceFromBottom = (this.props.relative ? parent.scrollHeight - parent.scrollTop : distanceFromBottom) - calculatedHeight;\n      const style = !isSticky ? {} : {\n        position: 'fixed',\n        top: bottomDifference > 0 ? this.props.relative ? parent.offsetTop - parent.offsetParent.scrollTop : 0 : bottomDifference,\n        left: placeholderClientRect.left,\n        width: placeholderClientRect.width\n      };\n\n      if (!this.props.disableHardwareAcceleration) {\n        style.transform = 'translateZ(0)';\n      }\n\n      this.setState({\n        isSticky,\n        wasSticky,\n        distanceFromTop,\n        distanceFromBottom,\n        calculatedHeight,\n        style\n      });\n    });\n\n    if (!this.context.subscribe) throw new TypeError('Expected Sticky to be mounted within StickyContainer');\n    this.context.subscribe(this.handleContainerEvent);\n  }\n\n  componentWillUnmount() {\n    this.context.unsubscribe(this.handleContainerEvent);\n  }\n\n  componentDidUpdate() {\n    this.placeholder.style.paddingBottom = this.props.disableCompensation ? 0 : `${this.state.isSticky ? this.state.calculatedHeight : 0}px`;\n  }\n\n  render() {\n    const element = React.cloneElement(this.props.children({\n      isSticky: this.state.isSticky,\n      wasSticky: this.state.wasSticky,\n      distanceFromTop: this.state.distanceFromTop,\n      distanceFromBottom: this.state.distanceFromBottom,\n      calculatedHeight: this.state.calculatedHeight,\n      style: this.state.style\n    }), {\n      ref: content => {\n        this.content = ReactDOM.findDOMNode(content);\n      }\n    });\n    return __jsx(\"div\", null, __jsx(\"div\", {\n      ref: placeholder => this.placeholder = placeholder\n    }), element);\n  }\n\n}\n\n_defineProperty(Sticky, \"defaultProps\", {\n  relative: false,\n  topOffset: 0,\n  bottomOffset: 0,\n  disableCompensation: false,\n  disableHardwareAcceleration: false\n});\n\n_defineProperty(Sticky, \"contextTypes\", {\n  subscribe: PropTypes.func,\n  unsubscribe: PropTypes.func,\n  getParent: PropTypes.func\n});","map":null,"metadata":{},"sourceType":"module"}