{"ast":null,"code":"import { useRef, useEffect, useState } from 'react';\nexport function useEventListener(eventName, handler, element = IS_CLIENT ? window : null) {\n  const savedHandler = useRef(handler);\n  useEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n  useEffect(() => {\n    if (!element || !element.addEventListener) return;\n\n    const eventListener = event => savedHandler.current(event);\n\n    element.addEventListener(eventName, eventListener);\n    return () => {\n      element.removeEventListener(eventName, eventListener);\n    };\n  }, [eventName, element]);\n}\nexport const useIsVisible = (initStatus = false) => {\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(initStatus);\n\n  const toggle = (status = true) => {\n    setVisible(status);\n  };\n\n  return {\n    isShow: visible,\n    showContent: () => toggle(),\n    hideContent: () => toggle(false),\n    toggleContent: () => toggle(!visible)\n  };\n};\nexport function usePrevious(value) {\n  const ref = useRef(null);\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n} //ref: https://stackoverflow.com/a/60458593\n\nexport const useProgressiveImage = (src = '') => {\n  const {\n    0: sourceLoaded,\n    1: setSourceLoaded\n  } = useState('');\n  useEffect(() => {\n    if (!src) return;\n    const img = new Image();\n    img.src = src;\n\n    img.onload = () => setSourceLoaded(src);\n\n    img.onerror = () => {};\n  }, [src]);\n  return sourceLoaded;\n};","map":null,"metadata":{},"sourceType":"module"}