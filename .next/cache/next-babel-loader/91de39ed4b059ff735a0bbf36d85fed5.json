{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport classNames from 'classnames';\nimport SlideToggle from 'react-slide-toggle';\nimport eases from 'eases';\nimport LazyLoad from 'react-lazyload';\nimport styles from '@styles/sass/page/tool.module.scss';\nimport { toolInfo } from '@store/mock';\nimport { LayoutMain } from '@components/layout';\nimport { Banner, LoadBackgroundImage } from '@components/common';\nvar toolbox = styles.toolbox;\n\nvar ToolList = function ToolList(_ref) {\n  var _ref$data = _ref.data,\n      data = _ref$data === void 0 ? [] : _ref$data,\n      _ref$calssName = _ref.calssName,\n      calssName = _ref$calssName === void 0 ? '' : _ref$calssName,\n      style = _ref.style;\n  return __jsx(\"div\", {\n    style: _objectSpread({\n      padding: '0 15px'\n    }, style),\n    className: \"row\".concat(calssName ? \" \".concat(calssName) : '')\n  }, data.map(function (_ref2) {\n    var name = _ref2.name,\n        url = _ref2.url,\n        src = _ref2.src;\n    return __jsx(\"div\", {\n      key: name,\n      className: \"tac tool-item col-4 col-lg-3 col-xl-2\"\n    }, __jsx(\"a\", _extends({\n      className: \"block\",\n      href: url || '#'\n    }, !url && {\n      onClick: function onClick(e) {\n        return e.preventDefault();\n      }\n    }, {\n      target: \"_blank\",\n      title: name\n    }), __jsx(\"dl\", {\n      className: \"bg-color-white p-tblr-md\"\n    }, __jsx(\"dt\", null, __jsx(LazyLoad, {\n      placeholder: __jsx(\"img\", {\n        src: \"https://dummyimage.com/64x64/eee/eee\"\n      })\n    }, __jsx(LoadBackgroundImage, {\n      src: src\n    }))), __jsx(\"dd\", {\n      className: \"ellipsis color-dark-gray\"\n    }, name))));\n  }));\n};\n\nvar Tool = function Tool() {\n  var _useState = useState(function () {\n    return toolInfo.map(function (_ref3) {\n      var id = _ref3.id;\n      return id;\n    });\n  }),\n      openIds = _useState[0],\n      setOpenIds = _useState[1];\n\n  var onToogleCollapse = function onToogleCollapse(itemId) {\n    var newOpenIds = openIds.includes(itemId) ? openIds.filter(function (id) {\n      return !Object.is(itemId, id);\n    }) : [].concat(_toConsumableArray(openIds), [itemId]);\n    setOpenIds(newOpenIds);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Banner, null), __jsx(LayoutMain, {\n    pageTitleProps: {\n      zhName: '推荐工具集',\n      enName: 'Recommended toolset'\n    },\n    className: toolbox\n  }, __jsx(\"ul\", {\n    className: \"jsx-55179994\" + \" \" + \"p-b-xl\"\n  }, toolInfo.map(function (_ref4) {\n    var title = _ref4.title,\n        id = _ref4.id,\n        list = _ref4.list;\n    var isOpen = openIds.includes(id);\n    return __jsx(\"li\", {\n      key: title,\n      className: \"jsx-55179994\"\n    }, __jsx(SlideToggle, {\n      duration: 700 // collapsed\n      ,\n      interpolateOnReverse: true,\n      easeCollapse: eases['bounceOut'],\n      easeExpand: eases['bounceOut'],\n      render: function render(_ref5) {\n        var toggle = _ref5.toggle,\n            toggleState = _ref5.toggleState,\n            setCollapsibleElement = _ref5.setCollapsibleElement;\n        return __jsx(React.Fragment, null, __jsx(\"h3\", {\n          onClick: function onClick() {\n            toggle();\n            onToogleCollapse(id);\n          },\n          className: \"jsx-55179994\" + \" \" + \"bg-color-primary color-white cursign r-m-p\"\n        }, __jsx(\"button\", {\n          className: \"jsx-55179994\" + \" \" + (classNames(\"bg-color-transparent m-r-md caret-right vam\", {\n            active: isOpen\n          }) || \"\")\n        }), title), __jsx(\"div\", {\n          ref: setCollapsibleElement,\n          className: \"jsx-55179994\"\n        }, __jsx(ToolList, {\n          data: list\n        })));\n      }\n    }));\n  }))), __jsx(_JSXStyle, {\n    id: \"55179994\"\n  }, [\"h3.jsx-55179994{padding:10px 20px;text-transform:capitalize;}\"]));\n};\n\nexport default Tool;","map":null,"metadata":{},"sourceType":"module"}