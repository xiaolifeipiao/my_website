{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport classNames from 'classnames';\nimport SlideToggle from 'react-slide-toggle';\nimport eases from 'eases';\nimport LazyLoad from 'react-lazyload';\nimport styles from '@styles/sass/page/tool.module.scss';\nimport { toolInfo } from '@store/mock';\nimport { LayoutMain } from '@components/layout';\nimport { Banner, LoadBackgroundImage } from '@components/common';\nconst {\n  toolbox\n} = styles;\n\nconst ToolList = ({\n  data = [],\n  calssName = '',\n  style\n}) => {\n  return __jsx(\"div\", {\n    style: _objectSpread({\n      padding: '0 15px'\n    }, style),\n    className: `row${calssName ? ` ${calssName}` : ''}`\n  }, data.map(({\n    name,\n    url,\n    src\n  }) => {\n    return __jsx(\"div\", {\n      key: name,\n      className: \"tac tool-item col-4 col-lg-3 col-xl-2\"\n    }, __jsx(\"a\", _extends({\n      className: \"block\",\n      href: url || '#'\n    }, !url && {\n      onClick: e => e.preventDefault()\n    }, {\n      target: \"_blank\",\n      title: name\n    }), __jsx(\"dl\", {\n      className: \"bg-color-white p-tblr-md\"\n    }, __jsx(\"dt\", null, __jsx(LazyLoad, {\n      placeholder: __jsx(\"img\", {\n        src: \"https://dummyimage.com/64x64/eee/eee\"\n      })\n    }, __jsx(LoadBackgroundImage, {\n      src: src\n    }))), __jsx(\"dd\", {\n      className: \"ellipsis color-dark-gray\"\n    }, name))));\n  }));\n};\n\nconst Tool = () => {\n  const {\n    0: openIds,\n    1: setOpenIds\n  } = useState(() => {\n    return toolInfo.map(({\n      id\n    }) => id);\n  });\n\n  const onToogleCollapse = itemId => {\n    const newOpenIds = openIds.includes(itemId) ? openIds.filter(id => !Object.is(itemId, id)) : [...openIds, itemId];\n    setOpenIds(newOpenIds);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Banner, null), __jsx(LayoutMain, {\n    pageTitleProps: {\n      zhName: '推荐工具集',\n      enName: 'Recommended toolset'\n    },\n    className: toolbox\n  }, __jsx(\"ul\", {\n    className: \"jsx-55179994\" + \" \" + \"p-b-xl\"\n  }, toolInfo.map(({\n    title,\n    id,\n    list\n  }) => {\n    const isOpen = openIds.includes(id);\n    return __jsx(\"li\", {\n      key: title,\n      className: \"jsx-55179994\"\n    }, __jsx(SlideToggle, {\n      duration: 700 // collapsed\n      ,\n      interpolateOnReverse: true,\n      easeCollapse: eases['bounceOut'],\n      easeExpand: eases['bounceOut'],\n      render: ({\n        toggle,\n        toggleState,\n        setCollapsibleElement\n      }) => {\n        return __jsx(React.Fragment, null, __jsx(\"h3\", {\n          onClick: () => {\n            toggle();\n            onToogleCollapse(id);\n          },\n          className: \"jsx-55179994\" + \" \" + \"bg-color-primary color-white cursign r-m-p\"\n        }, __jsx(\"button\", {\n          className: \"jsx-55179994\" + \" \" + (classNames(`bg-color-transparent m-r-md caret-right vam`, {\n            active: isOpen\n          }) || \"\")\n        }), title), __jsx(\"div\", {\n          ref: setCollapsibleElement,\n          className: \"jsx-55179994\"\n        }, __jsx(ToolList, {\n          data: list\n        })));\n      }\n    }));\n  }))), __jsx(_JSXStyle, {\n    id: \"55179994\"\n  }, [\"h3.jsx-55179994{padding:10px 20px;text-transform:capitalize;}\"]));\n};\n\nexport default Tool;","map":null,"metadata":{},"sourceType":"module"}