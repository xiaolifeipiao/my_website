{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport raf from \"raf\";\nexport default class Container extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"events\", [\"resize\", \"scroll\", \"touchstart\", \"touchmove\", \"touchend\", \"pageshow\", \"load\"]);\n\n    _defineProperty(this, \"subscribers\", []);\n\n    _defineProperty(this, \"rafHandle\", null);\n\n    _defineProperty(this, \"subscribe\", handler => {\n      this.subscribers = this.subscribers.concat(handler);\n    });\n\n    _defineProperty(this, \"unsubscribe\", handler => {\n      this.subscribers = this.subscribers.filter(current => current !== handler);\n    });\n\n    _defineProperty(this, \"notifySubscribers\", evt => {\n      if (!this.framePending) {\n        const {\n          currentTarget\n        } = evt;\n        this.rafHandle = raf(() => {\n          this.framePending = false;\n          const {\n            top,\n            bottom\n          } = this.node.getBoundingClientRect();\n          this.subscribers.forEach(handler => handler({\n            distanceFromTop: top,\n            distanceFromBottom: bottom,\n            eventSource: currentTarget === window ? document.body : this.node\n          }));\n        });\n        this.framePending = true;\n      }\n    });\n\n    _defineProperty(this, \"getParent\", () => this.node);\n  }\n\n  getChildContext() {\n    return {\n      subscribe: this.subscribe,\n      unsubscribe: this.unsubscribe,\n      getParent: this.getParent\n    };\n  }\n\n  componentDidMount() {\n    this.events.forEach(event => window.addEventListener(event, this.notifySubscribers));\n  }\n\n  componentWillUnmount() {\n    if (this.rafHandle) {\n      raf.cancel(this.rafHandle);\n      this.rafHandle = null;\n    }\n\n    this.events.forEach(event => window.removeEventListener(event, this.notifySubscribers));\n  }\n\n  render() {\n    return __jsx(\"div\", _extends({}, this.props, {\n      ref: node => this.node = node,\n      onScroll: this.notifySubscribers,\n      onTouchStart: this.notifySubscribers,\n      onTouchMove: this.notifySubscribers,\n      onTouchEnd: this.notifySubscribers\n    }));\n  }\n\n}\n\n_defineProperty(Container, \"childContextTypes\", {\n  subscribe: PropTypes.func,\n  unsubscribe: PropTypes.func,\n  getParent: PropTypes.func\n});","map":null,"metadata":{},"sourceType":"module"}