{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { isNumber } from 'util';\nimport Dialog from 'rc-dialog';\nimport classNames from 'classnames';\nimport { ReactComponent as SvgClose } from '@fonts/svg/shared/close.svg';\nimport { useState, useEffect, useRef } from 'react';\nimport { useProgressiveImage } from '../hooks';\n\nvar setAttrUnit = function setAttrUnit(val) {\n  return isNumber(val) ? \"\".concat(val, \"em\") : val;\n};\n\nvar SvgIconSizeValues = {\n  large: 2,\n  \"default\": 1.2,\n  small: 0.8\n};\nexport var SvgIcon = function SvgIcon(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      SvgComponent = _ref.component,\n      className = _ref.className,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 'default' : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"width\", \"height\", \"component\", \"className\", \"size\"]);\n\n  width = width || SvgIconSizeValues[size];\n  height = height || SvgIconSizeValues[size];\n  return __jsx(SvgComponent, _objectSpread({}, rest, {\n    width: setAttrUnit(width),\n    height: setAttrUnit(height),\n    className: \"vam\".concat(className ? \" \".concat(className) : '')\n  }));\n};\nexport var Modal = function Modal(_ref2) {\n  var children = _ref2.children,\n      rest = _objectWithoutProperties(_ref2, [\"children\"]);\n\n  return __jsx(Dialog, _extends({\n    closeIcon: __jsx(SvgIcon, {\n      size: \"large\",\n      component: SvgClose\n    })\n  }, rest), children);\n};\nexport var Loading = function Loading(_ref3) {\n  var _ref3$className = _ref3.className,\n      className = _ref3$className === void 0 ? '' : _ref3$className;\n  return __jsx(\"div\", {\n    className: \"line-scale \".concat(className)\n  }, __jsx(\"div\", null), __jsx(\"div\", null), __jsx(\"div\", null), __jsx(\"div\", null), __jsx(\"div\", null));\n};\nexport var Switch = function Switch(_ref4) {\n  var checkedChildren = _ref4.checkedChildren,\n      _ref4$checked = _ref4.checked,\n      initChecked = _ref4$checked === void 0 ? false : _ref4$checked,\n      uncheckedChildren = _ref4.uncheckedChildren,\n      onChange = _ref4.onChange,\n      _ref4$className = _ref4.className,\n      className = _ref4$className === void 0 ? '' : _ref4$className,\n      _ref4$style = _ref4.style,\n      style = _ref4$style === void 0 ? {} : _ref4$style;\n  var keepData = useRef({\n    checked: initChecked\n  });\n\n  var _useState = useState(initChecked),\n      checked = _useState[0],\n      setChecked = _useState[1];\n\n  var onSwitch = function onSwitch(e) {\n    var isChecked = !checked;\n    setChecked(isChecked);\n    keepData.current.checked = isChecked;\n    onChange && onChange(isChecked, e);\n  };\n\n  useEffect(function () {\n    if (!Object.is(keepData.current.checked, initChecked)) {\n      setChecked(initChecked);\n    }\n  }, [initChecked]);\n  return __jsx(\"button\", {\n    style: style,\n    onClick: onSwitch,\n    className: classNames(\"switch\".concat(className ? \" \".concat(className) : ''), {\n      checked: checked\n    })\n  }, __jsx(\"span\", {\n    className: \"content\"\n  }, checked ? checkedChildren : uncheckedChildren), __jsx(\"span\", {\n    className: \"round\"\n  }));\n};\nexport var LoadBackgroundImage = function LoadBackgroundImage(_ref5) {\n  var src = _ref5.src,\n      _ref5$placeholder = _ref5.placeholder,\n      placeholder = _ref5$placeholder === void 0 ? 'https://dummyimage.com/64x64/eee/eee' : _ref5$placeholder,\n      style = _ref5.style,\n      _ref5$className = _ref5.className,\n      className = _ref5$className === void 0 ? '' : _ref5$className;\n  var loaded = useProgressiveImage(src);\n  return __jsx(\"div\", {\n    className: className,\n    style: _objectSpread({\n      backgroundImage: \"url(\".concat(loaded || placeholder, \")\")\n    }, style)\n  });\n};","map":null,"metadata":{},"sourceType":"module"}