{"ast":null,"code":"import { useRef, useEffect, useState } from 'react';\nexport function useEventListener(eventName, handler) {\n  var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : IS_CLIENT ? window : null;\n  var savedHandler = useRef(handler);\n  useEffect(function () {\n    savedHandler.current = handler;\n  }, [handler]);\n  useEffect(function () {\n    if (!element || !element.addEventListener) return;\n\n    var eventListener = function eventListener(event) {\n      return savedHandler.current(event);\n    };\n\n    element.addEventListener(eventName, eventListener);\n    return function () {\n      element.removeEventListener(eventName, eventListener);\n    };\n  }, [eventName, element]);\n}\nexport var useIsVisible = function useIsVisible() {\n  var initStatus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n  var _useState = useState(initStatus),\n      visible = _useState[0],\n      setVisible = _useState[1];\n\n  var toggle = function toggle() {\n    var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    setVisible(status);\n  };\n\n  return {\n    isShow: visible,\n    showContent: function showContent() {\n      return toggle();\n    },\n    hideContent: function hideContent() {\n      return toggle(false);\n    },\n    toggleContent: function toggleContent() {\n      return toggle(!visible);\n    }\n  };\n};\nexport function usePrevious(value) {\n  var ref = useRef(null);\n  useEffect(function () {\n    ref.current = value;\n  });\n  return ref.current;\n} //ref: https://stackoverflow.com/a/60458593\n\nexport var useProgressiveImage = function useProgressiveImage() {\n  var src = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  var _useState2 = useState(''),\n      sourceLoaded = _useState2[0],\n      setSourceLoaded = _useState2[1];\n\n  useEffect(function () {\n    if (!src) return;\n    var img = new Image();\n    img.src = src;\n\n    img.onload = function () {\n      return setSourceLoaded(src);\n    };\n\n    img.onerror = function () {};\n  }, [src]);\n  return sourceLoaded;\n};","map":null,"metadata":{},"sourceType":"module"}