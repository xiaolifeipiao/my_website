{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toArray from \"@babel/runtime/helpers/esm/toArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useRef, useContext, useCallback } from 'react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport Router from 'next/router';\nimport classNames from 'classnames';\nimport { debounce } from 'throttle-debounce';\nimport { isString, isBoolean, isUndefined } from 'util';\nimport styles from '@styles/sass/frame/menus.module.scss';\nimport { isSmallScreen } from '@scripts/helper';\nimport { APP_CONFIG, THEME_COLOR_LIST, DEFAULT_THEME_COLOR, BACKGROUND_COLOR_LIST, DEFAULT_BACKGROUND_COLOR, DEFAULT_DARK_COLOR, DEFAULT_LOVEEYE_COLOR } from '@scripts/constant';\nimport { globalSelf, generateNumList, setStorage, getStorage } from '@scripts/utils';\nimport { CtxStore } from '../context';\nimport Menubar from './Menubar';\nimport { SvgIcon, Switch } from '../common';\nimport { ReactComponent as SvgCheck } from '@fonts/svg/menu/check.svg';\nimport { ReactComponent as SvgSetting } from '@fonts/svg/merge/setting.svg';\nimport { ReactComponent as SvgClose } from '@fonts/svg/shared/close.svg';\nimport { useIsVisible } from '../hooks';\nvar side_wrapper = styles.side_wrapper,\n    logo = styles.logo,\n    theme_wrapper = styles.theme_wrapper,\n    head_menu = styles.head_menu;\nvar _globalSelf$g_config = globalSelf.g_config,\n    name = _globalSelf$g_config.name,\n    logoPic = _globalSelf$g_config.logo;\nvar themeNums = generateNumList(5);\nvar toggleBtnNums = generateNumList(3);\n\nvar mediaScheme = function mediaScheme() {\n  return window.matchMedia('(prefers-color-scheme: dark)');\n};\n\nvar SideLogo = function SideLogo() {\n  return __jsx(Link, {\n    href: \"/\"\n  }, __jsx(\"a\", {\n    className: \"tac pos-rel block \".concat(logo),\n    title: name\n  }, __jsx(\"div\", {\n    className: \"round bdr-half\"\n  }, __jsx(\"i\", {\n    className: \"icon-circle pos-abs t-0\"\n  })), __jsx(\"h2\", {\n    className: \"pos-abs r-m-p color-white bg-color-primary\"\n  }, __jsx(\"span\", {\n    className: \"vam\"\n  }, \"\\u5C45\\u5C45\", __jsx(\"br\", null), \"\\u8D1D\\u8D1D\")), __jsx(\"img\", {\n    className: \"pos-abs vam\",\n    src: logoPic,\n    alt: name\n  })));\n};\n\nvar BackgroundOrColorTheme = function BackgroundOrColorTheme() {\n  var _useState = useState(false),\n      isFollowSystem = _useState[0],\n      setIsFollowSystem = _useState[1];\n\n  var keepData = useRef({\n    isFollowSystem: isFollowSystem\n  });\n\n  var _useState2 = useState(),\n      activeKey = _useState2[0],\n      setActiveKey = _useState2[1];\n\n  var _useState3 = useState(DEFAULT_THEME_COLOR),\n      currentColor = _useState3[0],\n      setCurrentColor = _useState3[1];\n\n  var _useContext = useContext(CtxStore),\n      dispatch = _useContext.dispatch;\n\n  var _BACKGROUND_COLOR_LIS = _toArray(BACKGROUND_COLOR_LIST),\n      rest = _BACKGROUND_COLOR_LIS.slice(1);\n\n  var onSwitchTheme = function onSwitchTheme(_ref) {\n    var backgroundKey = _ref.backgroundKey,\n        _ref$isColor = _ref.isColor,\n        isColor = _ref$isColor === void 0 ? true : _ref$isColor,\n        _ref$isMemory = _ref.isMemory,\n        isMemory = _ref$isMemory === void 0 ? true : _ref$isMemory,\n        _ref$isEqualReturn = _ref.isEqualReturn,\n        isEqualReturn = _ref$isEqualReturn === void 0 ? true : _ref$isEqualReturn;\n    if (isUndefined(backgroundKey)) return;\n\n    try {\n      var isEqual = isEqualReturn && Object.is(activeKey, backgroundKey);\n\n      var _ref2 = isColor && !isEqual ? [Object.is(DEFAULT_BACKGROUND_COLOR, backgroundKey), rest.includes(backgroundKey), Object.is(backgroundKey, DEFAULT_LOVEEYE_COLOR)] : [],\n          _ref3 = _slicedToArray(_ref2, 3),\n          isDefaultColor = _ref3[0],\n          isDarkColor = _ref3[1],\n          isLoveEyeColor = _ref3[2];\n\n      var isEmpty = isEqual || isDefaultColor;\n      var bodyStyle = isEmpty ? {} : {\n        background: isColor ? backgroundKey : \"url(\".concat(require(\"@images/icons/icon-bg\".concat(backgroundKey, \".png\")), \")\")\n      };\n      var docStyle = document.documentElement.style;\n      docStyle.setProperty('--color-default-gray', isLoveEyeColor ? DEFAULT_DARK_COLOR : isDarkColor ? '#fff' : '#aaa');\n      docStyle.setProperty('--color-lighten-gray', isLoveEyeColor ? '#d2d2d2' : isDarkColor ? '#676767' : '#dadada');\n      setActiveKey(isEqual ? void 0 : backgroundKey);\n      isMemory && setStorage(APP_CONFIG, {\n        backgroundKey: isEmpty ? void 0 : backgroundKey\n      });\n      dispatch({\n        type: 'global',\n        payload: {\n          bodyStyle: bodyStyle\n        }\n      });\n    } catch (error) {\n      console.warn(\"\\u5F15\\u5165\\u80CC\\u666F\\u56FE\\u7247\\u5931\\u8D25\");\n    }\n  };\n\n  var onSwitchColor = function onSwitchColor(color) {\n    if (Object.is(currentColor, color)) return;\n    var docStyle = document.documentElement.style;\n    docStyle.setProperty('--color-primary', color);\n    setCurrentColor(color);\n    setStorage(APP_CONFIG, {\n      themeColor: color\n    });\n  };\n\n  var onCustomColorChange = useCallback(debounce(1000, onSwitchColor), []);\n\n  var setThemeBackground = function setThemeBackground() {\n    var _getStorage = getStorage(APP_CONFIG),\n        backgroundKey = _getStorage.backgroundKey;\n\n    onSwitchTheme({\n      backgroundKey: backgroundKey,\n      isColor: isString(backgroundKey) && backgroundKey.includes('#'),\n      isEqualReturn: false\n    });\n  };\n\n  var handleSwitchTheme = function handleSwitchTheme(e) {\n    if (!keepData.current.isFollowSystem) return;\n    var isDarkMode = e ? e.matches : mediaScheme().matches;\n\n    if (isDarkMode) {\n      return onSwitchTheme({\n        backgroundKey: DEFAULT_DARK_COLOR,\n        isMemory: false,\n        isEqualReturn: false\n      });\n    }\n\n    return onSwitchTheme({\n      backgroundKey: DEFAULT_BACKGROUND_COLOR,\n      isMemory: false\n    });\n  };\n\n  var changeIsFollowSystem = function changeIsFollowSystem(isOpen) {\n    setIsFollowSystem(isOpen);\n    keepData.current.isFollowSystem = isOpen;\n  };\n\n  var onFollowSystem = function onFollowSystem(checked) {\n    setStorage(APP_CONFIG, {\n      isFollowSystem: checked\n    });\n    changeIsFollowSystem(checked);\n    checked ? handleSwitchTheme() : setThemeBackground();\n  };\n\n  useEffect(function () {\n    var _getStorage2 = getStorage(APP_CONFIG),\n        themeColor = _getStorage2.themeColor,\n        storeIsFollowSystem = _getStorage2.isFollowSystem;\n\n    themeColor && onSwitchColor(themeColor);\n\n    if (isBoolean(storeIsFollowSystem) && storeIsFollowSystem) {\n      changeIsFollowSystem(true);\n      return handleSwitchTheme();\n    }\n\n    setThemeBackground();\n  }, []);\n  useEffect(function () {\n    var media = mediaScheme();\n    media.addListener ? media.addListener(handleSwitchTheme) : media.addEventListener('change', handleSwitchTheme);\n    return function () {\n      ;\n      (media.removeListener || media.removeListener)(handleSwitchTheme);\n    };\n  }, []);\n  return __jsx(\"section\", {\n    className: \"\".concat(theme_wrapper, \" tac p-b-xl\")\n  }, __jsx(\"h4\", {\n    className: \"font-weight-normal r-m-p\"\n  }, \"\\u80CC\\u666F\"), __jsx(\"div\", {\n    className: \"m-t-xl\"\n  }, BACKGROUND_COLOR_LIST.map(function (color) {\n    return __jsx(\"button\", {\n      className: classNames('pos-rel', {\n        active: !isFollowSystem && Object.is(activeKey, color)\n      }),\n      disabled: isFollowSystem,\n      style: {\n        width: 42,\n        height: 32,\n        backgroundColor: color\n      },\n      onClick: function onClick() {\n        return onSwitchTheme({\n          backgroundKey: color\n        });\n      },\n      key: color\n    }, __jsx(SvgIcon, {\n      className: \"pos-abs tblr-0 m-auto hide color-primary\",\n      component: SvgCheck\n    }));\n  }), themeNums.slice(-(themeNums.length - 2)).map(function (item) {\n    var index = ++item;\n    return __jsx(\"button\", _extends({\n      className: classNames('pos-rel', {\n        active: !isFollowSystem && Object.is(activeKey, index)\n      }),\n      disabled: isFollowSystem\n    }, activeKey && {\n      style: {\n        boxShadow: '0px 0px 5px var(--color-lighten-gray)'\n      }\n    }, {\n      onClick: function onClick() {\n        return onSwitchTheme({\n          backgroundKey: index,\n          isColor: false\n        });\n      },\n      key: index\n    }), __jsx(\"i\", {\n      className: \"icon-bg\".concat(index)\n    }), __jsx(SvgIcon, {\n      className: \"pos-abs tblr-0 m-auto hide color-primary\",\n      component: SvgCheck\n    }));\n  }), __jsx(\"h4\", {\n    className: \"font-weight-normal r-m-p m-t-b-xl\"\n  }, \"\\u8DDF\\u968F\\u7CFB\\u7EDF:\", __jsx(\"span\", {\n    className: \"m-l-xxs\"\n  }, __jsx(Switch, {\n    checked: isFollowSystem,\n    checkedChildren: \"\\u5F00\",\n    uncheckedChildren: \"\\u5173\",\n    onChange: onFollowSystem\n  })))), __jsx(\"h4\", {\n    className: \"font-weight-normal r-m-p m-b-xl\"\n  }, \"\\u989C\\u8272\"), THEME_COLOR_LIST.map(function (color, index) {\n    var isLast = Object.is(THEME_COLOR_LIST.length - 1, index);\n    return __jsx(\"button\", _extends({\n      className: classNames('pos-rel', {\n        active: Object.is(currentColor, color)\n      }),\n      style: {\n        width: 42,\n        height: 32,\n        backgroundColor: color\n      }\n    }, !isLast && {\n      onClick: function onClick() {\n        return onSwitchColor(color);\n      }\n    }, {\n      key: color\n    }), __jsx(SvgIcon, {\n      className: \"pos-abs tblr-0 m-auto hide color-white\",\n      component: SvgCheck\n    }), isLast && __jsx(React.Fragment, null, __jsx(\"input\", {\n      className: \"input-custom-color pos-abs tblr-0 w-h-100 cursign\",\n      onChange: function onChange(_ref4) {\n        var value = _ref4.target.value;\n        return onCustomColorChange(value);\n      },\n      type: \"color\"\n    }), __jsx(\"span\", {\n      className: \"font-size-xs color-white\"\n    }, \"\\u81EA\\u5B9A\\u4E49\")));\n  }));\n};\n\nvar Sidebar = function Sidebar() {\n  var _useContext2 = useContext(CtxStore),\n      store = _useContext2.store;\n\n  var bodyStyle = store.bodyStyle;\n  var keepData = useRef({\n    pathname: ''\n  });\n\n  var _useRouter = useRouter(),\n      pathname = _useRouter.pathname;\n\n  var _useState4 = useState(false),\n      toogle = _useState4[0],\n      setToogle = _useState4[1];\n\n  var _useIsVisible = useIsVisible(),\n      isShow = _useIsVisible.isShow,\n      toggleContent = _useIsVisible.toggleContent;\n\n  useEffect(function () {\n    if (!isSmallScreen()) return;\n\n    var handleRouteChange = function handleRouteChange(url) {\n      var pathname = keepData.current.pathname;\n\n      if (!Object.is(url, pathname)) {\n        setToogle(false);\n      }\n    };\n\n    var events = Router.events;\n    events.on('routeChangeStart', handleRouteChange);\n    return function () {\n      events.off('routeChangeStart', handleRouteChange);\n    };\n  }, []);\n  useEffect(function () {\n    keepData.current.pathname = pathname;\n  }, [pathname]);\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"pos-fix tar z-3 t-l-0 w-100 bg-color-primary \".concat(head_menu)\n  }, __jsx(\"button\", {\n    className: classNames(\"bg-color-transparent vam\", {\n      active: toogle\n    }),\n    onClick: function onClick() {\n      return setToogle(!toogle);\n    }\n  }, toggleBtnNums.map(function (num) {\n    return __jsx(\"span\", {\n      key: num\n    }, __jsx(\"i\", null));\n  }))), __jsx(\"section\", {\n    style: _objectSpread({}, toogle && {\n      left: 0\n    }, {\n      zIndex: 13\n    }, bodyStyle),\n    className: classNames(\"pos-fix t-l-0 h-100 bg-color-white \".concat(side_wrapper), {\n      active: toogle\n    })\n  }, __jsx(SideLogo, null), __jsx(Menubar, null), __jsx(\"div\", {\n    className: \"pos-rel\"\n  }, __jsx(\"button\", {\n    onClick: toggleContent,\n    className: classNames('btn-theme-setting pos-abs bg-color-primary color-white p-tblr-xxs font-size-lg bd-none z-1')\n  }, __jsx(SvgIcon, {\n    component: isShow ? SvgClose : SvgSetting\n  })), __jsx(\"div\", {\n    className: \"pos-abs tblr-0 m-auto\",\n    style: {\n      transform: \"translateX(\".concat(isShow ? 0 : '-100%', \")\"),\n      transition: '.5s'\n    }\n  }, __jsx(BackgroundOrColorTheme, null)))));\n};\n\nexport default Sidebar;","map":null,"metadata":{},"sourceType":"module"}