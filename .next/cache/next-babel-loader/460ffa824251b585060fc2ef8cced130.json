{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { isNumber } from 'util';\nimport Dialog from 'rc-dialog';\nimport classNames from 'classnames';\nimport { ReactComponent as SvgClose } from '@fonts/svg/shared/close.svg';\nimport { useState, useEffect, useRef } from 'react';\nimport { useProgressiveImage } from '../hooks';\n\nconst setAttrUnit = val => isNumber(val) ? `${val}em` : val;\n\nconst SvgIconSizeValues = {\n  large: 2,\n  default: 1.2,\n  small: 0.8\n};\nexport const SvgIcon = (_ref) => {\n  let {\n    width,\n    height,\n    component: SvgComponent,\n    className,\n    size = 'default'\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"width\", \"height\", \"component\", \"className\", \"size\"]);\n\n  width = width || SvgIconSizeValues[size];\n  height = height || SvgIconSizeValues[size];\n  return __jsx(SvgComponent, _objectSpread({}, rest, {\n    width: setAttrUnit(width),\n    height: setAttrUnit(height),\n    className: `vam${className ? ` ${className}` : ''}`\n  }));\n};\nexport const Modal = (_ref2) => {\n  let {\n    children\n  } = _ref2,\n      rest = _objectWithoutProperties(_ref2, [\"children\"]);\n\n  return __jsx(Dialog, _extends({\n    closeIcon: __jsx(SvgIcon, {\n      size: \"large\",\n      component: SvgClose\n    })\n  }, rest), children);\n};\nexport const Loading = ({\n  className = ''\n}) => __jsx(\"div\", {\n  className: `line-scale ${className}`\n}, __jsx(\"div\", null), __jsx(\"div\", null), __jsx(\"div\", null), __jsx(\"div\", null), __jsx(\"div\", null));\nexport const Switch = ({\n  checkedChildren,\n  checked: initChecked = false,\n  uncheckedChildren,\n  onChange,\n  className = '',\n  style = {}\n}) => {\n  const keepData = useRef({\n    checked: initChecked\n  });\n  const {\n    0: checked,\n    1: setChecked\n  } = useState(initChecked);\n\n  const onSwitch = e => {\n    const isChecked = !checked;\n    setChecked(isChecked);\n    keepData.current.checked = isChecked;\n    onChange && onChange(isChecked, e);\n  };\n\n  useEffect(() => {\n    if (!Object.is(keepData.current.checked, initChecked)) {\n      setChecked(initChecked);\n    }\n  }, [initChecked]);\n  return __jsx(\"button\", {\n    style: style,\n    onClick: onSwitch,\n    className: classNames(`switch${className ? ` ${className}` : ''}`, {\n      checked\n    })\n  }, __jsx(\"span\", {\n    className: \"content\"\n  }, checked ? checkedChildren : uncheckedChildren), __jsx(\"span\", {\n    className: \"round\"\n  }));\n};\nexport const LoadBackgroundImage = ({\n  src,\n  placeholder = 'https://dummyimage.com/64x64/eee/eee',\n  style,\n  className = ''\n}) => {\n  const loaded = useProgressiveImage(src);\n  return __jsx(\"div\", {\n    className: className,\n    style: _objectSpread({\n      backgroundImage: `url(${loaded || placeholder})`\n    }, style)\n  });\n};","map":null,"metadata":{},"sourceType":"module"}